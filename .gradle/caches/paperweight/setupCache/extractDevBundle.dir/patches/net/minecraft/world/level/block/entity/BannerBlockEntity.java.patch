--- a/net/minecraft/world/level/block/entity/BannerBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BannerBlockEntity.java
@@ -19,6 +19,7 @@
 import net.minecraft.world.level.block.state.BlockState;
 
 public class BannerBlockEntity extends BlockEntity implements Nameable {
+
     public static final int MAX_PATTERNS = 6;
     public static final String TAG_PATTERNS = "Patterns";
     public static final String TAG_PATTERN = "Pattern";
@@ -33,7 +34,7 @@
 
     public BannerBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.BANNER, pos, state);
-        this.baseColor = ((AbstractBannerBlock)state.getBlock()).getColor();
+        this.baseColor = ((AbstractBannerBlock) state.getBlock()).getColor();
     }
 
     public BannerBlockEntity(BlockPos pos, BlockState state, DyeColor baseColor) {
@@ -43,13 +44,14 @@
 
     @Nullable
     public static ListTag getItemPatterns(ItemStack stack) {
-        ListTag listTag = null;
-        CompoundTag compoundTag = BlockItem.getBlockEntityData(stack);
-        if (compoundTag != null && compoundTag.contains("Patterns", 9)) {
-            listTag = compoundTag.getList("Patterns", 10).copy();
+        ListTag nbttaglist = null;
+        CompoundTag nbttagcompound = BlockItem.getBlockEntityData(stack);
+
+        if (nbttagcompound != null && nbttagcompound.contains("Patterns", 9)) {
+            nbttaglist = nbttagcompound.getList("Patterns", 10).copy();
         }
 
-        return listTag;
+        return nbttaglist;
     }
 
     public void fromItem(ItemStack stack, DyeColor baseColor) {
@@ -58,14 +60,14 @@
     }
 
     public void fromItem(ItemStack stack) {
-        this.itemPatterns = getItemPatterns(stack);
+        this.itemPatterns = BannerBlockEntity.getItemPatterns(stack);
         this.patterns = null;
         this.name = stack.hasCustomHoverName() ? stack.getHoverName() : null;
     }
 
     @Override
     public Component getName() {
-        return (Component)(this.name != null ? this.name : new TranslatableComponent("block.minecraft.banner"));
+        return (Component) (this.name != null ? this.name : new TranslatableComponent("block.minecraft.banner"));
     }
 
     @Nullable
@@ -95,10 +97,15 @@
     public void load(CompoundTag nbt) {
         super.load(nbt);
         if (nbt.contains("CustomName", 8)) {
-            this.name = Component.Serializer.fromJson(nbt.getString("CustomName"));
+            this.name = net.minecraft.server.MCUtil.getBaseComponentFromNbt("CustomName", nbt); // Paper - Catch ParseException
         }
 
         this.itemPatterns = nbt.getList("Patterns", 10);
+        // CraftBukkit start
+        while (this.itemPatterns.size() > 20) {
+            this.itemPatterns.remove(20);
+        }
+        // CraftBukkit end
         this.patterns = null;
     }
 
@@ -113,13 +120,14 @@
     }
 
     public static int getPatternCount(ItemStack stack) {
-        CompoundTag compoundTag = BlockItem.getBlockEntityData(stack);
-        return compoundTag != null && compoundTag.contains("Patterns") ? compoundTag.getList("Patterns", 10).size() : 0;
+        CompoundTag nbttagcompound = BlockItem.getBlockEntityData(stack);
+
+        return nbttagcompound != null && nbttagcompound.contains("Patterns") ? nbttagcompound.getList("Patterns", 10).size() : 0;
     }
 
     public List<Pair<BannerPattern, DyeColor>> getPatterns() {
         if (this.patterns == null) {
-            this.patterns = createPatterns(this.baseColor, this.itemPatterns);
+            this.patterns = BannerBlockEntity.createPatterns(this.baseColor, this.itemPatterns);
         }
 
         return this.patterns;
@@ -127,14 +135,17 @@
 
     public static List<Pair<BannerPattern, DyeColor>> createPatterns(DyeColor baseColor, @Nullable ListTag patternListNbt) {
         List<Pair<BannerPattern, DyeColor>> list = Lists.newArrayList();
+
         list.add(Pair.of(BannerPattern.BASE, baseColor));
         if (patternListNbt != null) {
-            for(int i = 0; i < patternListNbt.size(); ++i) {
-                CompoundTag compoundTag = patternListNbt.getCompound(i);
-                BannerPattern bannerPattern = BannerPattern.byHash(compoundTag.getString("Pattern"));
-                if (bannerPattern != null) {
-                    int j = compoundTag.getInt("Color");
-                    list.add(Pair.of(bannerPattern, DyeColor.byId(j)));
+            for (int i = 0; i < patternListNbt.size(); ++i) {
+                CompoundTag nbttagcompound = patternListNbt.getCompound(i);
+                BannerPattern enumbannerpatterntype = BannerPattern.byHash(nbttagcompound.getString("Pattern"));
+
+                if (enumbannerpatterntype != null) {
+                    int j = nbttagcompound.getInt("Color");
+
+                    list.add(Pair.of(enumbannerpatterntype, DyeColor.byId(j)));
                 }
             }
         }
@@ -143,33 +154,37 @@
     }
 
     public static void removeLastPattern(ItemStack stack) {
-        CompoundTag compoundTag = BlockItem.getBlockEntityData(stack);
-        if (compoundTag != null && compoundTag.contains("Patterns", 9)) {
-            ListTag listTag = compoundTag.getList("Patterns", 10);
-            if (!listTag.isEmpty()) {
-                listTag.remove(listTag.size() - 1);
-                if (listTag.isEmpty()) {
-                    compoundTag.remove("Patterns");
+        CompoundTag nbttagcompound = BlockItem.getBlockEntityData(stack);
+
+        if (nbttagcompound != null && nbttagcompound.contains("Patterns", 9)) {
+            ListTag nbttaglist = nbttagcompound.getList("Patterns", 10);
+
+            if (!nbttaglist.isEmpty()) {
+                nbttaglist.remove(nbttaglist.size() - 1);
+                if (nbttaglist.isEmpty()) {
+                    nbttagcompound.remove("Patterns");
                 }
 
-                BlockItem.setBlockEntityData(stack, BlockEntityType.BANNER, compoundTag);
+                BlockItem.setBlockEntityData(stack, BlockEntityType.BANNER, nbttagcompound);
             }
         }
     }
 
     public ItemStack getItem() {
-        ItemStack itemStack = new ItemStack(BannerBlock.byColor(this.baseColor));
+        ItemStack itemstack = new ItemStack(BannerBlock.byColor(this.baseColor));
+
         if (this.itemPatterns != null && !this.itemPatterns.isEmpty()) {
-            CompoundTag compoundTag = new CompoundTag();
-            compoundTag.put("Patterns", this.itemPatterns.copy());
-            BlockItem.setBlockEntityData(itemStack, this.getType(), compoundTag);
+            CompoundTag nbttagcompound = new CompoundTag();
+
+            nbttagcompound.put("Patterns", this.itemPatterns.copy());
+            BlockItem.setBlockEntityData(itemstack, this.getType(), nbttagcompound);
         }
 
         if (this.name != null) {
-            itemStack.setHoverName(this.name);
+            itemstack.setHoverName(this.name);
         }
 
-        return itemStack;
+        return itemstack;
     }
 
     public DyeColor getBaseColor() {
