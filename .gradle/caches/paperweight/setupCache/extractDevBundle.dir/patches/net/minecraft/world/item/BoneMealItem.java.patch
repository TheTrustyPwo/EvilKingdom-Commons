--- a/net/minecraft/world/item/BoneMealItem.java
+++ b/net/minecraft/world/item/BoneMealItem.java
@@ -16,11 +16,13 @@
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.world.level.block.BaseCoralWallFanBlock;
+import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.BonemealableBlock;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class BoneMealItem extends Item {
+
     public static final int GRASS_SPREAD_WIDTH = 3;
     public static final int GRASS_SPREAD_HEIGHT = 1;
     public static final int GRASS_COUNT_MULTIPLIER = 3;
@@ -31,24 +33,32 @@
 
     @Override
     public InteractionResult useOn(UseOnContext context) {
-        Level level = context.getLevel();
-        BlockPos blockPos = context.getClickedPos();
-        BlockPos blockPos2 = blockPos.relative(context.getClickedFace());
-        if (growCrop(context.getItemInHand(), level, blockPos)) {
-            if (!level.isClientSide) {
-                level.levelEvent(1505, blockPos, 0);
+        // CraftBukkit start - extract bonemeal application logic to separate, static method
+        return BoneMealItem.applyBonemeal(context);
+    }
+
+    public static InteractionResult applyBonemeal(UseOnContext itemactioncontext) {
+        // CraftBukkit end
+        Level world = itemactioncontext.getLevel();
+        BlockPos blockposition = itemactioncontext.getClickedPos();
+        BlockPos blockposition1 = blockposition.relative(itemactioncontext.getClickedFace());
+
+        if (BoneMealItem.growCrop(itemactioncontext.getItemInHand(), world, blockposition)) {
+            if (!world.isClientSide) {
+                world.levelEvent(1505, blockposition, 0);
             }
 
-            return InteractionResult.sidedSuccess(level.isClientSide);
+            return InteractionResult.sidedSuccess(world.isClientSide);
         } else {
-            BlockState blockState = level.getBlockState(blockPos);
-            boolean bl = blockState.isFaceSturdy(level, blockPos, context.getClickedFace());
-            if (bl && growWaterPlant(context.getItemInHand(), level, blockPos2, context.getClickedFace())) {
-                if (!level.isClientSide) {
-                    level.levelEvent(1505, blockPos2, 0);
+            BlockState iblockdata = world.getBlockState(blockposition);
+            boolean flag = iblockdata.isFaceSturdy(world, blockposition, itemactioncontext.getClickedFace());
+
+            if (flag && BoneMealItem.growWaterPlant(itemactioncontext.getItemInHand(), world, blockposition1, itemactioncontext.getClickedFace())) {
+                if (!world.isClientSide) {
+                    world.levelEvent(1505, blockposition1, 0);
                 }
 
-                return InteractionResult.sidedSuccess(level.isClientSide);
+                return InteractionResult.sidedSuccess(world.isClientSide);
             } else {
                 return InteractionResult.PASS;
             }
@@ -56,13 +66,15 @@
     }
 
     public static boolean growCrop(ItemStack stack, Level world, BlockPos pos) {
-        BlockState blockState = world.getBlockState(pos);
-        if (blockState.getBlock() instanceof BonemealableBlock) {
-            BonemealableBlock bonemealableBlock = (BonemealableBlock)blockState.getBlock();
-            if (bonemealableBlock.isValidBonemealTarget(world, pos, blockState, world.isClientSide)) {
+        BlockState iblockdata = world.getBlockState(pos);
+
+        if (iblockdata.getBlock() instanceof BonemealableBlock) {
+            BonemealableBlock iblockfragileplantelement = (BonemealableBlock) iblockdata.getBlock();
+
+            if (iblockfragileplantelement.isValidBonemealTarget(world, pos, iblockdata, world.isClientSide)) {
                 if (world instanceof ServerLevel) {
-                    if (bonemealableBlock.isBonemealSuccess(world, world.random, pos, blockState)) {
-                        bonemealableBlock.performBonemeal((ServerLevel)world, world.random, pos, blockState);
+                    if (iblockfragileplantelement.isBonemealSuccess(world, world.random, pos, iblockdata)) {
+                        iblockfragileplantelement.performBonemeal((ServerLevel) world, world.random, pos, iblockdata);
                     }
 
                     stack.shrink(1);
@@ -81,54 +93,63 @@
                 return true;
             } else {
                 Random random = world.getRandom();
+                int i = 0;
 
-                label78:
-                for(int i = 0; i < 128; ++i) {
-                    BlockPos blockPos2 = blockPos;
-                    BlockState blockState = Blocks.SEAGRASS.defaultBlockState();
+                while (i < 128) {
+                    BlockPos blockposition1 = blockPos;
+                    BlockState iblockdata = Blocks.SEAGRASS.defaultBlockState();
+                    int j = 0;
 
-                    for(int j = 0; j < i / 16; ++j) {
-                        blockPos2 = blockPos2.offset(random.nextInt(3) - 1, (random.nextInt(3) - 1) * random.nextInt(3) / 2, random.nextInt(3) - 1);
-                        if (world.getBlockState(blockPos2).isCollisionShapeFullBlock(world, blockPos2)) {
-                            continue label78;
-                        }
-                    }
+                    while (true) {
+                        if (j < i / 16) {
+                            blockposition1 = blockposition1.offset(random.nextInt(3) - 1, (random.nextInt(3) - 1) * random.nextInt(3) / 2, random.nextInt(3) - 1);
+                            if (!world.getBlockState(blockposition1).isCollisionShapeFullBlock(world, blockposition1)) {
+                                ++j;
+                                continue;
+                            }
+                        } else {
+                            Holder<Biome> holder = world.getBiome(blockposition1);
 
-                    Holder<Biome> holder = world.getBiome(blockPos2);
-                    if (holder.is(Biomes.WARM_OCEAN)) {
-                        if (i == 0 && facing != null && facing.getAxis().isHorizontal()) {
-                            blockState = Registry.BLOCK.getTag(BlockTags.WALL_CORALS).flatMap((blocks) -> {
-                                return blocks.getRandomElement(world.random);
-                            }).map((blockEntry) -> {
-                                return blockEntry.value().defaultBlockState();
-                            }).orElse(blockState);
-                            if (blockState.hasProperty(BaseCoralWallFanBlock.FACING)) {
-                                blockState = blockState.setValue(BaseCoralWallFanBlock.FACING, facing);
+                            if (holder.is(Biomes.WARM_OCEAN)) {
+                                if (i == 0 && facing != null && facing.getAxis().isHorizontal()) {
+                                    iblockdata = (BlockState) Registry.BLOCK.getTag(BlockTags.WALL_CORALS).flatMap((holderset_named) -> {
+                                        return holderset_named.getRandomElement(world.random);
+                                    }).map((holder1) -> {
+                                        return ((Block) holder1.value()).defaultBlockState();
+                                    }).orElse(iblockdata);
+                                    if (iblockdata.hasProperty(BaseCoralWallFanBlock.FACING)) {
+                                        iblockdata = (BlockState) iblockdata.setValue(BaseCoralWallFanBlock.FACING, facing);
+                                    }
+                                } else if (random.nextInt(4) == 0) {
+                                    iblockdata = (BlockState) Registry.BLOCK.getTag(BlockTags.UNDERWATER_BONEMEALS).flatMap((holderset_named) -> {
+                                        return holderset_named.getRandomElement(world.random);
+                                    }).map((holder1) -> {
+                                        return ((Block) holder1.value()).defaultBlockState();
+                                    }).orElse(iblockdata);
+                                }
                             }
-                        } else if (random.nextInt(4) == 0) {
-                            blockState = Registry.BLOCK.getTag(BlockTags.UNDERWATER_BONEMEALS).flatMap((blocks) -> {
-                                return blocks.getRandomElement(world.random);
-                            }).map((blockEntry) -> {
-                                return blockEntry.value().defaultBlockState();
-                            }).orElse(blockState);
-                        }
-                    }
 
-                    if (blockState.is(BlockTags.WALL_CORALS, (state) -> {
-                        return state.hasProperty(BaseCoralWallFanBlock.FACING);
-                    })) {
-                        for(int k = 0; !blockState.canSurvive(world, blockPos2) && k < 4; ++k) {
-                            blockState = blockState.setValue(BaseCoralWallFanBlock.FACING, Direction.Plane.HORIZONTAL.getRandomDirection(random));
-                        }
-                    }
+                            if (iblockdata.is(BlockTags.WALL_CORALS, (blockbase_blockdata) -> {
+                                return blockbase_blockdata.hasProperty(BaseCoralWallFanBlock.FACING);
+                            })) {
+                                for (int k = 0; !iblockdata.canSurvive(world, blockposition1) && k < 4; ++k) {
+                                    iblockdata = (BlockState) iblockdata.setValue(BaseCoralWallFanBlock.FACING, Direction.Plane.HORIZONTAL.getRandomDirection(random));
+                                }
+                            }
 
-                    if (blockState.canSurvive(world, blockPos2)) {
-                        BlockState blockState2 = world.getBlockState(blockPos2);
-                        if (blockState2.is(Blocks.WATER) && world.getFluidState(blockPos2).getAmount() == 8) {
-                            world.setBlock(blockPos2, blockState, 3);
-                        } else if (blockState2.is(Blocks.SEAGRASS) && random.nextInt(10) == 0) {
-                            ((BonemealableBlock)Blocks.SEAGRASS).performBonemeal((ServerLevel)world, random, blockPos2, blockState2);
+                            if (iblockdata.canSurvive(world, blockposition1)) {
+                                BlockState iblockdata1 = world.getBlockState(blockposition1);
+
+                                if (iblockdata1.is(Blocks.WATER) && world.getFluidState(blockposition1).getAmount() == 8) {
+                                    world.setBlock(blockposition1, iblockdata, 3);
+                                } else if (iblockdata1.is(Blocks.SEAGRASS) && random.nextInt(10) == 0) {
+                                    ((BonemealableBlock) Blocks.SEAGRASS).performBonemeal((ServerLevel) world, random, blockposition1, iblockdata1);
+                                }
+                            }
                         }
+
+                        ++i;
+                        break;
                     }
                 }
 
@@ -145,36 +166,39 @@
             count = 15;
         }
 
-        BlockState blockState = world.getBlockState(pos);
-        if (!blockState.isAir()) {
-            double d = 0.5D;
-            double e;
-            if (blockState.is(Blocks.WATER)) {
+        BlockState iblockdata = world.getBlockState(pos);
+
+        if (!iblockdata.isAir()) {
+            double d0 = 0.5D;
+            double d1;
+
+            if (iblockdata.is(Blocks.WATER)) {
                 count *= 3;
-                e = 1.0D;
-                d = 3.0D;
-            } else if (blockState.isSolidRender(world, pos)) {
+                d1 = 1.0D;
+                d0 = 3.0D;
+            } else if (iblockdata.isSolidRender(world, pos)) {
                 pos = pos.above();
                 count *= 3;
-                d = 3.0D;
-                e = 1.0D;
+                d0 = 3.0D;
+                d1 = 1.0D;
             } else {
-                e = blockState.getShape(world, pos).max(Direction.Axis.Y);
+                d1 = iblockdata.getShape(world, pos).max(Direction.Axis.Y);
             }
 
-            world.addParticle(ParticleTypes.HAPPY_VILLAGER, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, 0.0D, 0.0D, 0.0D);
+            world.addParticle(ParticleTypes.HAPPY_VILLAGER, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, 0.0D, 0.0D, 0.0D);
             Random random = world.getRandom();
 
-            for(int i = 0; i < count; ++i) {
-                double h = random.nextGaussian() * 0.02D;
-                double j = random.nextGaussian() * 0.02D;
-                double k = random.nextGaussian() * 0.02D;
-                double l = 0.5D - d;
-                double m = (double)pos.getX() + l + random.nextDouble() * d * 2.0D;
-                double n = (double)pos.getY() + random.nextDouble() * e;
-                double o = (double)pos.getZ() + l + random.nextDouble() * d * 2.0D;
-                if (!world.getBlockState((new BlockPos(m, n, o)).below()).isAir()) {
-                    world.addParticle(ParticleTypes.HAPPY_VILLAGER, m, n, o, h, j, k);
+            for (int j = 0; j < count; ++j) {
+                double d2 = random.nextGaussian() * 0.02D;
+                double d3 = random.nextGaussian() * 0.02D;
+                double d4 = random.nextGaussian() * 0.02D;
+                double d5 = 0.5D - d0;
+                double d6 = (double) pos.getX() + d5 + random.nextDouble() * d0 * 2.0D;
+                double d7 = (double) pos.getY() + random.nextDouble() * d1;
+                double d8 = (double) pos.getZ() + d5 + random.nextDouble() * d0 * 2.0D;
+
+                if (!world.getBlockState((new BlockPos(d6, d7, d8)).below()).isAir()) {
+                    world.addParticle(ParticleTypes.HAPPY_VILLAGER, d6, d7, d8, d2, d3, d4);
                 }
             }
 
