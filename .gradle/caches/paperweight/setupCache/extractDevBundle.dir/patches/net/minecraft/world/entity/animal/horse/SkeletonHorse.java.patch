--- a/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -20,17 +20,18 @@
 import net.minecraft.world.level.Level;
 
 public class SkeletonHorse extends AbstractHorse {
+
     private final SkeletonTrapGoal skeletonTrapGoal = new SkeletonTrapGoal(this);
     private static final int TRAP_MAX_LIFE = 18000;
     private boolean isTrap;
-    private int trapTime;
+    public int trapTime; // PAIL
 
     public SkeletonHorse(EntityType<? extends SkeletonHorse> type, Level world) {
         super(type, world);
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return createBaseHorseAttributes().add(Attributes.MAX_HEALTH, 15.0D).add(Attributes.MOVEMENT_SPEED, (double)0.2F);
+        return createBaseHorseAttributes().add(Attributes.MAX_HEALTH, 15.0D).add(Attributes.MOVEMENT_SPEED, 0.20000000298023224D);
     }
 
     @Override
@@ -39,8 +40,7 @@
     }
 
     @Override
-    protected void addBehaviourGoals() {
-    }
+    protected void addBehaviourGoals() {}
 
     @Override
     protected SoundEvent getAmbientSound() {
@@ -162,12 +162,13 @@
     @Nullable
     @Override
     public AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        return EntityType.SKELETON_HORSE.create(world);
+        return (AgeableMob) EntityType.SKELETON_HORSE.create(world);
     }
 
     @Override
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemStack = player.getItemInHand(hand);
+        ItemStack itemstack = player.getItemInHand(hand);
+
         if (!this.isTamed()) {
             return InteractionResult.PASS;
         } else if (this.isBaby()) {
@@ -178,15 +179,16 @@
         } else if (this.isVehicle()) {
             return super.mobInteract(player, hand);
         } else {
-            if (!itemStack.isEmpty()) {
-                if (itemStack.is(Items.SADDLE) && !this.isSaddled()) {
+            if (!itemstack.isEmpty()) {
+                if (itemstack.is(Items.SADDLE) && !this.isSaddled()) {
                     this.openInventory(player);
                     return InteractionResult.sidedSuccess(this.level.isClientSide);
                 }
 
-                InteractionResult interactionResult = itemStack.interactLivingEntity(player, this, hand);
-                if (interactionResult.consumesAction()) {
-                    return interactionResult;
+                InteractionResult enuminteractionresult = itemstack.interactLivingEntity(player, this, hand);
+
+                if (enuminteractionresult.consumesAction()) {
+                    return enuminteractionresult;
                 }
             }
 
