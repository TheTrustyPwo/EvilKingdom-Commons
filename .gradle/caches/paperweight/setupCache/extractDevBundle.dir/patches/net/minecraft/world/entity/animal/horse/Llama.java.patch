--- a/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/net/minecraft/world/entity/animal/horse/Llama.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity.animal.horse;
 
+import java.util.Iterator;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleTypes;
@@ -55,6 +56,7 @@
 import net.minecraft.world.phys.Vec3;
 
 public class Llama extends AbstractChestedHorse implements RangedAttackMob {
+
     private static final int MAX_STRENGTH = 5;
     private static final int VARIANTS = 4;
     private static final Ingredient FOOD_ITEMS = Ingredient.of(Items.WHEAT, Blocks.HAY_BLOCK.asItem());
@@ -75,17 +77,24 @@
         return false;
     }
 
+    // CraftBukkit start
+    public void setStrengthPublic(int i) {
+        this.setStrength(i);
+    }
+    // CraftBukkit end
+
     private void setStrength(int strength) {
-        this.entityData.set(DATA_STRENGTH_ID, Math.max(1, Math.min(5, strength)));
+        this.entityData.set(Llama.DATA_STRENGTH_ID, Math.max(1, Math.min(5, strength)));
     }
 
     private void setRandomStrength() {
         int i = this.random.nextFloat() < 0.04F ? 5 : 3;
+
         this.setStrength(1 + this.random.nextInt(i));
     }
 
     public int getStrength() {
-        return this.entityData.get(DATA_STRENGTH_ID);
+        return (Integer) this.entityData.get(Llama.DATA_STRENGTH_ID);
     }
 
     @Override
@@ -115,7 +124,7 @@
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
         this.goalSelector.addGoal(1, new RunAroundLikeCrazyGoal(this, 1.2D));
-        this.goalSelector.addGoal(2, new LlamaFollowCaravanGoal(this, (double)2.1F));
+        this.goalSelector.addGoal(2, new LlamaFollowCaravanGoal(this, 2.0999999046325684D));
         this.goalSelector.addGoal(3, new RangedAttackGoal(this, 1.25D, 40, 20.0F));
         this.goalSelector.addGoal(3, new PanicGoal(this, 1.2D));
         this.goalSelector.addGoal(4, new BreedGoal(this, 1.0D));
@@ -135,17 +144,17 @@
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_STRENGTH_ID, 0);
-        this.entityData.define(DATA_SWAG_ID, -1);
-        this.entityData.define(DATA_VARIANT_ID, 0);
+        this.entityData.define(Llama.DATA_STRENGTH_ID, 0);
+        this.entityData.define(Llama.DATA_SWAG_ID, -1);
+        this.entityData.define(Llama.DATA_VARIANT_ID, 0);
     }
 
     public int getVariant() {
-        return Mth.clamp(this.entityData.get(DATA_VARIANT_ID), 0, 3);
+        return Mth.clamp((Integer) this.entityData.get(Llama.DATA_VARIANT_ID), (int) 0, (int) 3);
     }
 
     public void setVariant(int variant) {
-        this.entityData.set(DATA_VARIANT_ID, variant);
+        this.entityData.set(Llama.DATA_VARIANT_ID, variant);
     }
 
     @Override
@@ -156,16 +165,17 @@
     @Override
     public void positionRider(Entity passenger) {
         if (this.hasPassenger(passenger)) {
-            float f = Mth.cos(this.yBodyRot * ((float)Math.PI / 180F));
-            float g = Mth.sin(this.yBodyRot * ((float)Math.PI / 180F));
-            float h = 0.3F;
-            passenger.setPos(this.getX() + (double)(0.3F * g), this.getY() + this.getPassengersRidingOffset() + passenger.getMyRidingOffset(), this.getZ() - (double)(0.3F * f));
+            float f = Mth.cos(this.yBodyRot * 0.017453292F);
+            float f1 = Mth.sin(this.yBodyRot * 0.017453292F);
+            float f2 = 0.3F;
+
+            passenger.setPos(this.getX() + (double) (0.3F * f1), this.getY() + this.getPassengersRidingOffset() + passenger.getMyRidingOffset(), this.getZ() - (double) (0.3F * f));
         }
     }
 
     @Override
     public double getPassengersRidingOffset() {
-        return (double)this.getBbHeight() * 0.6D;
+        return (double) this.getBbHeight() * 0.6D;
     }
 
     @Override
@@ -175,61 +185,63 @@
 
     @Override
     public boolean isFood(ItemStack stack) {
-        return FOOD_ITEMS.test(stack);
+        return Llama.FOOD_ITEMS.test(stack);
     }
 
     @Override
     protected boolean handleEating(Player player, ItemStack item) {
-        int i = 0;
-        int j = 0;
+        byte b0 = 0;
+        byte b1 = 0;
         float f = 0.0F;
-        boolean bl = false;
+        boolean flag = false;
+
         if (item.is(Items.WHEAT)) {
-            i = 10;
-            j = 3;
+            b0 = 10;
+            b1 = 3;
             f = 2.0F;
         } else if (item.is(Blocks.HAY_BLOCK.asItem())) {
-            i = 90;
-            j = 6;
+            b0 = 90;
+            b1 = 6;
             f = 10.0F;
             if (this.isTamed() && this.getAge() == 0 && this.canFallInLove()) {
-                bl = true;
+                flag = true;
                 this.setInLove(player);
             }
         }
 
         if (this.getHealth() < this.getMaxHealth() && f > 0.0F) {
             this.heal(f);
-            bl = true;
+            flag = true;
         }
 
-        if (this.isBaby() && i > 0) {
+        if (this.isBaby() && b0 > 0) {
             this.level.addParticle(ParticleTypes.HAPPY_VILLAGER, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), 0.0D, 0.0D, 0.0D);
             if (!this.level.isClientSide) {
-                this.ageUp(i);
+                this.ageUp(b0);
             }
 
-            bl = true;
+            flag = true;
         }
 
-        if (j > 0 && (bl || !this.isTamed()) && this.getTemper() < this.getMaxTemper()) {
-            bl = true;
+        if (b1 > 0 && (flag || !this.isTamed()) && this.getTemper() < this.getMaxTemper()) {
+            flag = true;
             if (!this.level.isClientSide) {
-                this.modifyTemper(j);
+                this.modifyTemper(b1);
             }
         }
 
-        if (bl) {
+        if (flag) {
             this.gameEvent(GameEvent.MOB_INTERACT, this.eyeBlockPosition());
             if (!this.isSilent()) {
-                SoundEvent soundEvent = this.getEatingSound();
-                if (soundEvent != null) {
-                    this.level.playSound((Player)null, this.getX(), this.getY(), this.getZ(), this.getEatingSound(), this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+                SoundEvent soundeffect = this.getEatingSound();
+
+                if (soundeffect != null) {
+                    this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), this.getEatingSound(), this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
                 }
             }
         }
 
-        return bl;
+        return flag;
     }
 
     @Override
@@ -242,15 +254,16 @@
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         this.setRandomStrength();
         int i;
+
         if (entityData instanceof Llama.LlamaGroupData) {
-            i = ((Llama.LlamaGroupData)entityData).variant;
+            i = ((Llama.LlamaGroupData) entityData).variant;
         } else {
             i = this.random.nextInt(4);
             entityData = new Llama.LlamaGroupData(i);
         }
 
         this.setVariant(i);
-        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
     }
 
     @Override
@@ -291,9 +304,10 @@
 
     @Override
     public void makeMad() {
-        SoundEvent soundEvent = this.getAngrySound();
-        if (soundEvent != null) {
-            this.playSound(soundEvent, this.getSoundVolume(), this.getVoicePitch());
+        SoundEvent soundeffect = this.getAngrySound();
+
+        if (soundeffect != null) {
+            this.playSound(soundeffect, this.getSoundVolume(), this.getVoicePitch());
         }
 
     }
@@ -325,10 +339,12 @@
 
     @Override
     public void containerChanged(Container sender) {
-        DyeColor dyeColor = this.getSwag();
+        DyeColor enumcolor = this.getSwag();
+
         super.containerChanged(sender);
-        DyeColor dyeColor2 = this.getSwag();
-        if (this.tickCount > 20 && dyeColor2 != null && dyeColor2 != dyeColor) {
+        DyeColor enumcolor1 = this.getSwag();
+
+        if (this.tickCount > 20 && enumcolor1 != null && enumcolor1 != enumcolor) {
             this.playSound(SoundEvents.LLAMA_SWAG, 0.5F, 1.0F);
         }
 
@@ -338,23 +354,25 @@
     protected void updateContainerEquipment() {
         if (!this.level.isClientSide) {
             super.updateContainerEquipment();
-            this.setSwag(getDyeColor(this.inventory.getItem(1)));
+            this.setSwag(Llama.getDyeColor(this.inventory.getItem(1)));
         }
     }
 
     private void setSwag(@Nullable DyeColor color) {
-        this.entityData.set(DATA_SWAG_ID, color == null ? -1 : color.getId());
+        this.entityData.set(Llama.DATA_SWAG_ID, color == null ? -1 : color.getId());
     }
 
     @Nullable
     private static DyeColor getDyeColor(ItemStack color) {
         Block block = Block.byItem(color.getItem());
-        return block instanceof WoolCarpetBlock ? ((WoolCarpetBlock)block).getColor() : null;
+
+        return block instanceof WoolCarpetBlock ? ((WoolCarpetBlock) block).getColor() : null;
     }
 
     @Nullable
     public DyeColor getSwag() {
-        int i = this.entityData.get(DATA_SWAG_ID);
+        int i = (Integer) this.entityData.get(Llama.DATA_SWAG_ID);
+
         return i == -1 ? null : DyeColor.byId(i);
     }
 
@@ -365,40 +383,43 @@
 
     @Override
     public boolean canMate(Animal other) {
-        return other != this && other instanceof Llama && this.canParent() && ((Llama)other).canParent();
+        return other != this && other instanceof Llama && this.canParent() && ((Llama) other).canParent();
     }
 
     @Override
-    public Llama getBreedOffspring(ServerLevel serverLevel, AgeableMob ageableMob) {
-        Llama llama = this.makeBabyLlama();
-        this.setOffspringAttributes(ageableMob, llama);
-        Llama llama2 = (Llama)ageableMob;
-        int i = this.random.nextInt(Math.max(this.getStrength(), llama2.getStrength())) + 1;
+    public Llama getBreedOffspring(ServerLevel world, AgeableMob entity) {
+        Llama entityllama = this.makeBabyLlama();
+
+        this.setOffspringAttributes(entity, entityllama);
+        Llama entityllama1 = (Llama) entity;
+        int i = this.random.nextInt(Math.max(this.getStrength(), entityllama1.getStrength())) + 1;
+
         if (this.random.nextFloat() < 0.03F) {
             ++i;
         }
 
-        llama.setStrength(i);
-        llama.setVariant(this.random.nextBoolean() ? this.getVariant() : llama2.getVariant());
-        return llama;
+        entityllama.setStrength(i);
+        entityllama.setVariant(this.random.nextBoolean() ? this.getVariant() : entityllama1.getVariant());
+        return entityllama;
     }
 
     protected Llama makeBabyLlama() {
-        return EntityType.LLAMA.create(this.level);
+        return (Llama) EntityType.LLAMA.create(this.level);
     }
 
     private void spit(LivingEntity target) {
-        LlamaSpit llamaSpit = new LlamaSpit(this.level, this);
-        double d = target.getX() - this.getX();
-        double e = target.getY(0.3333333333333333D) - llamaSpit.getY();
-        double f = target.getZ() - this.getZ();
-        double g = Math.sqrt(d * d + f * f) * (double)0.2F;
-        llamaSpit.shoot(d, e + g, f, 1.5F, 10.0F);
+        LlamaSpit entityllamaspit = new LlamaSpit(this.level, this);
+        double d0 = target.getX() - this.getX();
+        double d1 = target.getY(0.3333333333333333D) - entityllamaspit.getY();
+        double d2 = target.getZ() - this.getZ();
+        double d3 = Math.sqrt(d0 * d0 + d2 * d2) * 0.20000000298023224D;
+
+        entityllamaspit.shoot(d0, d1 + d3, d2, 1.5F, 10.0F);
         if (!this.isSilent()) {
-            this.level.playSound((Player)null, this.getX(), this.getY(), this.getZ(), SoundEvents.LLAMA_SPIT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+            this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.LLAMA_SPIT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
         }
 
-        this.level.addFreshEntity(llamaSpit);
+        this.level.addFreshEntity(entityllamaspit);
         this.didSpit = true;
     }
 
@@ -409,14 +430,19 @@
     @Override
     public boolean causeFallDamage(float fallDistance, float damageMultiplier, DamageSource damageSource) {
         int i = this.calculateFallDamage(fallDistance, damageMultiplier);
+
         if (i <= 0) {
             return false;
         } else {
             if (fallDistance >= 6.0F) {
-                this.hurt(damageSource, (float)i);
+                this.hurt(damageSource, (float) i);
                 if (this.isVehicle()) {
-                    for(Entity entity : this.getIndirectPassengers()) {
-                        entity.hurt(damageSource, (float)i);
+                    Iterator iterator = this.getIndirectPassengers().iterator();
+
+                    while (iterator.hasNext()) {
+                        Entity entity = (Entity) iterator.next();
+
+                        entity.hurt(damageSource, (float) i);
                     }
                 }
             }
@@ -477,13 +503,35 @@
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, 0.75D * (double)this.getEyeHeight(), (double)this.getBbWidth() * 0.5D);
+        return new Vec3(0.0D, 0.75D * (double) this.getEyeHeight(), (double) this.getBbWidth() * 0.5D);
     }
 
-    static class LlamaAttackWolfGoal extends NearestAttackableTargetGoal<Wolf> {
+    private static class LlamaHurtByTargetGoal extends HurtByTargetGoal {
+
+        public LlamaHurtByTargetGoal(Llama llama) {
+            super(llama);
+        }
+
+        @Override
+        public boolean canContinueToUse() {
+            if (this.mob instanceof Llama) {
+                Llama entityllama = (Llama) this.mob;
+
+                if (entityllama.didSpit) {
+                    entityllama.setDidSpit(false);
+                    return false;
+                }
+            }
+
+            return super.canContinueToUse();
+        }
+    }
+
+    private static class LlamaAttackWolfGoal extends NearestAttackableTargetGoal<Wolf> {
+
         public LlamaAttackWolfGoal(Llama llama) {
-            super(llama, Wolf.class, 16, false, true, (wolf) -> {
-                return !((Wolf)wolf).isTame();
+            super(llama, Wolf.class, 16, false, true, (entityliving) -> {
+                return !((Wolf) entityliving).isTame();
             });
         }
 
@@ -493,7 +541,8 @@
         }
     }
 
-    static class LlamaGroupData extends AgeableMob.AgeableMobGroupData {
+    private static class LlamaGroupData extends AgeableMob.AgeableMobGroupData {
+
         public final int variant;
 
         LlamaGroupData(int variant) {
@@ -501,23 +550,4 @@
             this.variant = variant;
         }
     }
-
-    static class LlamaHurtByTargetGoal extends HurtByTargetGoal {
-        public LlamaHurtByTargetGoal(Llama llama) {
-            super(llama);
-        }
-
-        @Override
-        public boolean canContinueToUse() {
-            if (this.mob instanceof Llama) {
-                Llama llama = (Llama)this.mob;
-                if (llama.didSpit) {
-                    llama.setDidSpit(false);
-                    return false;
-                }
-            }
-
-            return super.canContinueToUse();
-        }
-    }
 }
