--- a/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/net/minecraft/world/entity/animal/goat/Goat.java
@@ -21,6 +21,7 @@
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
@@ -43,13 +44,18 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
+// CraftBukkit start
+import org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack;
+// CraftBukkit end
 
 public class Goat extends Animal {
+
     public static final EntityDimensions LONG_JUMPING_DIMENSIONS = EntityDimensions.scalable(0.9F, 1.3F).scale(0.7F);
     private static final int ADULT_ATTACK_DAMAGE = 2;
     private static final int BABY_ATTACK_DAMAGE = 1;
     protected static final ImmutableList<SensorType<? extends Sensor<? super Goat>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.GOAT_TEMPTATIONS);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryModuleType.RAM_TARGET);
+    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, new MemoryModuleType[]{MemoryModuleType.IS_TEMPTED, MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryModuleType.RAM_TARGET});
     public static final int GOAT_FALL_DAMAGE_REDUCTION = 10;
     public static final double GOAT_SCREAMING_CHANCE = 0.02D;
     private static final EntityDataAccessor<Boolean> DATA_IS_SCREAMING_GOAT = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
@@ -65,7 +71,7 @@
 
     @Override
     protected Brain.Provider<Goat> brainProvider() {
-        return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
+        return Brain.provider(Goat.MEMORY_TYPES, Goat.SENSOR_TYPES);
     }
 
     @Override
@@ -74,7 +80,7 @@
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, (double)0.2F).add(Attributes.ATTACK_DAMAGE, 2.0D);
+        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, 0.20000000298023224D).add(Attributes.ATTACK_DAMAGE, 2.0D);
     }
 
     @Override
@@ -117,12 +123,14 @@
     }
 
     @Override
-    public Goat getBreedOffspring(ServerLevel serverLevel, AgeableMob ageableMob) {
-        Goat goat = EntityType.GOAT.create(serverLevel);
+    public Goat getBreedOffspring(ServerLevel world, AgeableMob entity) {
+        Goat goat = (Goat) EntityType.GOAT.create(world);
+
         if (goat != null) {
             GoatAi.initMemories(goat);
-            boolean bl = ageableMob instanceof Goat && ((Goat)ageableMob).isScreamingGoat();
-            goat.setScreamingGoat(bl || serverLevel.getRandom().nextDouble() < 0.02D);
+            boolean flag = entity instanceof Goat && ((Goat) entity).isScreamingGoat();
+
+            goat.setScreamingGoat(flag || world.getRandom().nextDouble() < 0.02D);
         }
 
         return goat;
@@ -130,13 +138,13 @@
 
     @Override
     public Brain<Goat> getBrain() {
-        return super.getBrain();
+        return (Brain<Goat>) super.getBrain(); // CraftBukkit - decompile error
     }
 
     @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("goatBrain");
-        this.getBrain().tick((ServerLevel)this.level, this);
+        this.getBrain().tick((ServerLevel) this.level, this);
         this.level.getProfiler().pop();
         this.level.getProfiler().push("goatActivityUpdate");
         GoatAi.updateActivity(this);
@@ -152,9 +160,10 @@
     @Override
     public void setYHeadRot(float headYaw) {
         int i = this.getMaxHeadYRot();
-        float f = Mth.degreesDifference(this.yBodyRot, headYaw);
-        float g = Mth.clamp(f, (float)(-i), (float)i);
-        super.setYHeadRot(this.yBodyRot + g);
+        float f1 = Mth.degreesDifference(this.yBodyRot, headYaw);
+        float f2 = Mth.clamp(f1, (float) (-i), (float) i);
+
+        super.setYHeadRot(this.yBodyRot + f2);
     }
 
     @Override
@@ -164,19 +173,29 @@
 
     @Override
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemStack = player.getItemInHand(hand);
-        if (itemStack.is(Items.BUCKET) && !this.isBaby()) {
+        ItemStack itemstack = player.getItemInHand(hand);
+
+        if (itemstack.is(Items.BUCKET) && !this.isBaby()) {
+            // CraftBukkit start - Got milk?
+            org.bukkit.event.player.PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent((ServerLevel) player.level, player, this.blockPosition(), this.blockPosition(), null, itemstack, Items.MILK_BUCKET, hand); // Paper - add enumHand
+
+            if (event.isCancelled()) {
+                return InteractionResult.PASS;
+            }
+            // CraftBukkit end
             player.playSound(this.getMilkingSound(), 1.0F, 1.0F);
-            ItemStack itemStack2 = ItemUtils.createFilledResult(itemStack, player, Items.MILK_BUCKET.getDefaultInstance());
-            player.setItemInHand(hand, itemStack2);
+            ItemStack itemstack1 = ItemUtils.createFilledResult(itemstack, player, CraftItemStack.asNMSCopy(event.getItemStack())); // CraftBukkit
+
+            player.setItemInHand(hand, itemstack1);
             return InteractionResult.sidedSuccess(this.level.isClientSide);
         } else {
-            InteractionResult interactionResult = super.mobInteract(player, hand);
-            if (interactionResult.consumesAction() && this.isFood(itemStack)) {
-                this.level.playSound((Player)null, this, this.getEatingSound(itemStack), SoundSource.NEUTRAL, 1.0F, Mth.randomBetween(this.level.random, 0.8F, 1.2F));
+            InteractionResult enuminteractionresult = super.mobInteract(player, hand);
+
+            if (enuminteractionresult.consumesAction() && this.isFood(itemstack)) {
+                this.level.playSound((Player) null, (Entity) this, this.getEatingSound(itemstack), SoundSource.NEUTRAL, 1.0F, Mth.randomBetween(this.level.random, 0.8F, 1.2F));
             }
 
-            return interactionResult;
+            return enuminteractionresult;
         }
     }
 
@@ -195,7 +214,7 @@
 
     @Override
     public EntityDimensions getDimensions(Pose pose) {
-        return pose == Pose.LONG_JUMPING ? LONG_JUMPING_DIMENSIONS.scale(this.getScale()) : super.getDimensions(pose);
+        return pose == Pose.LONG_JUMPING ? Goat.LONG_JUMPING_DIMENSIONS.scale(this.getScale()) : super.getDimensions(pose);
     }
 
     @Override
@@ -230,29 +249,40 @@
             this.lowerHeadTick -= 2;
         }
 
-        this.lowerHeadTick = Mth.clamp(this.lowerHeadTick, 0, 20);
+        this.lowerHeadTick = Mth.clamp(this.lowerHeadTick, (int) 0, (int) 20);
         super.aiStep();
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_IS_SCREAMING_GOAT, false);
+        this.entityData.define(Goat.DATA_IS_SCREAMING_GOAT, false);
     }
 
     public boolean isScreamingGoat() {
-        return this.entityData.get(DATA_IS_SCREAMING_GOAT);
+        return (Boolean) this.entityData.get(Goat.DATA_IS_SCREAMING_GOAT);
     }
 
     public void setScreamingGoat(boolean screaming) {
-        this.entityData.set(DATA_IS_SCREAMING_GOAT, screaming);
+        this.entityData.set(Goat.DATA_IS_SCREAMING_GOAT, screaming);
     }
 
     public float getRammingXHeadRot() {
-        return (float)this.lowerHeadTick / 20.0F * 30.0F * ((float)Math.PI / 180F);
+        return (float) this.lowerHeadTick / 20.0F * 30.0F * 0.017453292F;
     }
 
     public static boolean checkGoatSpawnRules(EntityType<? extends Animal> entityType, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
         return world.getBlockState(pos.below()).is(BlockTags.GOATS_SPAWNABLE_ON) && isBrightEnoughToSpawn(world, pos);
     }
+
+    // Paper start - Goat ram API
+    public void ram(net.minecraft.world.entity.LivingEntity entity) {
+        Brain<Goat> brain = this.getBrain();
+        brain.setMemory(MemoryModuleType.RAM_TARGET, entity.position());
+        brain.eraseMemory(MemoryModuleType.RAM_COOLDOWN_TICKS);
+        brain.eraseMemory(MemoryModuleType.BREED_TARGET);
+        brain.eraseMemory(MemoryModuleType.TEMPTING_PLAYER);
+        brain.setActiveActivityIfPossible(net.minecraft.world.entity.schedule.Activity.RAM);
+    }
+    // Paper end
 }
