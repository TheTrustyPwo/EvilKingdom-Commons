--- a/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -9,10 +9,12 @@
 import com.mojang.serialization.JsonOps;
 import com.mojang.serialization.Lifecycle;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Iterator;
+import java.util.Map.Entry;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalLong;
 import java.util.Random;
-import java.util.Map.Entry;
 import java.util.function.Function;
 import net.minecraft.core.Holder;
 import net.minecraft.core.MappedRegistry;
@@ -20,6 +22,7 @@
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.RegistryCodecs;
 import net.minecraft.core.WritableRegistry;
+import net.minecraft.resources.RegistryOps;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.dedicated.DedicatedServerProperties;
 import net.minecraft.world.level.Level;
@@ -35,9 +38,10 @@
 import org.slf4j.Logger;
 
 public class WorldGenSettings {
-    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create((instance) -> {
-        return instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), RegistryCodecs.dataPackAwareCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> {
-            return worldGenSettings.legacyCustomOptions;
+
+    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.<WorldGenSettings>create((instance) -> { // CraftBukkit - decompile error
+        return instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), RegistryCodecs.dataPackAwareCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((generatorsettings) -> {
+            return generatorsettings.legacyCustomOptions;
         })).apply(instance, instance.stable(WorldGenSettings::new));
     }).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -48,12 +52,9 @@
     private final Optional<String> legacyCustomOptions;
 
     private DataResult<WorldGenSettings> guardExperimental() {
-        LevelStem levelStem = this.dimensions.get(LevelStem.OVERWORLD);
-        if (levelStem == null) {
-            return DataResult.error("Overworld settings missing");
-        } else {
-            return this.stable() ? DataResult.success(this, Lifecycle.stable()) : DataResult.success(this);
-        }
+        LevelStem worlddimension = (LevelStem) this.dimensions.get(LevelStem.OVERWORLD);
+
+        return worlddimension == null ? DataResult.error("Overworld settings missing") : (this.stable() ? DataResult.success(this, Lifecycle.stable()) : DataResult.success(this));
     }
 
     private boolean stable() {
@@ -62,8 +63,9 @@
 
     public WorldGenSettings(long seed, boolean generateStructures, boolean bonusChest, Registry<LevelStem> options) {
         this(seed, generateStructures, bonusChest, options, Optional.empty());
-        LevelStem levelStem = options.get(LevelStem.OVERWORLD);
-        if (levelStem == null) {
+        LevelStem worlddimension = (LevelStem) options.get(LevelStem.OVERWORLD);
+
+        if (worlddimension == null) {
             throw new IllegalStateException("Overworld settings missing");
         }
     }
@@ -78,32 +80,35 @@
 
     public static WorldGenSettings demoSettings(RegistryAccess registryManager) {
         int i = "North Carolina".hashCode();
-        return new WorldGenSettings((long)i, true, true, withOverworld(registryManager.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY), DimensionType.defaultDimensions(registryManager, (long)i), makeDefaultOverworld(registryManager, (long)i)));
+
+        return new WorldGenSettings((long) i, true, true, WorldGenSettings.withOverworld(registryManager.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY), DimensionType.defaultDimensions(registryManager, (long) i), WorldGenSettings.makeDefaultOverworld(registryManager, (long) i)));
     }
 
     public static WorldGenSettings makeDefault(RegistryAccess registryManager) {
-        long l = (new Random()).nextLong();
-        return new WorldGenSettings(l, true, false, withOverworld(registryManager.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY), DimensionType.defaultDimensions(registryManager, l), makeDefaultOverworld(registryManager, l)));
+        long i = (new Random()).nextLong();
+
+        return new WorldGenSettings(i, true, false, WorldGenSettings.withOverworld(registryManager.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY), DimensionType.defaultDimensions(registryManager, i), WorldGenSettings.makeDefaultOverworld(registryManager, i)));
     }
 
     public static NoiseBasedChunkGenerator makeDefaultOverworld(RegistryAccess registryManager, long seed) {
-        return makeDefaultOverworld(registryManager, seed, true);
+        return WorldGenSettings.makeDefaultOverworld(registryManager, seed, true);
     }
 
-    public static NoiseBasedChunkGenerator makeDefaultOverworld(RegistryAccess registryManager, long seed, boolean bl) {
-        return makeOverworld(registryManager, seed, NoiseGeneratorSettings.OVERWORLD, bl);
+    public static NoiseBasedChunkGenerator makeDefaultOverworld(RegistryAccess registryManager, long seed, boolean flag) {
+        return WorldGenSettings.makeOverworld(registryManager, seed, NoiseGeneratorSettings.OVERWORLD, flag);
     }
 
     public static NoiseBasedChunkGenerator makeOverworld(RegistryAccess registryManager, long seed, ResourceKey<NoiseGeneratorSettings> settings) {
-        return makeOverworld(registryManager, seed, settings, true);
+        return WorldGenSettings.makeOverworld(registryManager, seed, settings, true);
     }
 
-    public static NoiseBasedChunkGenerator makeOverworld(RegistryAccess registryManager, long seed, ResourceKey<NoiseGeneratorSettings> settings, boolean bl) {
-        Registry<Biome> registry = registryManager.registryOrThrow(Registry.BIOME_REGISTRY);
-        Registry<StructureSet> registry2 = registryManager.registryOrThrow(Registry.STRUCTURE_SET_REGISTRY);
-        Registry<NoiseGeneratorSettings> registry3 = registryManager.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY);
-        Registry<NormalNoise.NoiseParameters> registry4 = registryManager.registryOrThrow(Registry.NOISE_REGISTRY);
-        return new NoiseBasedChunkGenerator(registry2, registry4, MultiNoiseBiomeSource.Preset.OVERWORLD.biomeSource(registry, bl), seed, registry3.getOrCreateHolder(settings));
+    public static NoiseBasedChunkGenerator makeOverworld(RegistryAccess registryManager, long seed, ResourceKey<NoiseGeneratorSettings> settings, boolean flag) {
+        Registry<Biome> iregistry = registryManager.registryOrThrow(Registry.BIOME_REGISTRY);
+        Registry<StructureSet> iregistry1 = registryManager.registryOrThrow(Registry.STRUCTURE_SET_REGISTRY);
+        Registry<NoiseGeneratorSettings> iregistry2 = registryManager.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY);
+        Registry<NormalNoise.NoiseParameters> iregistry3 = registryManager.registryOrThrow(Registry.NOISE_REGISTRY);
+
+        return new NoiseBasedChunkGenerator(iregistry1, iregistry3, MultiNoiseBiomeSource.Preset.OVERWORLD.biomeSource(iregistry, flag), seed, iregistry2.getOrCreateHolder(settings));
     }
 
     public long seed() {
@@ -119,23 +124,28 @@
     }
 
     public static Registry<LevelStem> withOverworld(Registry<DimensionType> dimensionTypeRegistry, Registry<LevelStem> options, ChunkGenerator overworldGenerator) {
-        LevelStem levelStem = options.get(LevelStem.OVERWORLD);
-        Holder<DimensionType> holder = levelStem == null ? dimensionTypeRegistry.getOrCreateHolder(DimensionType.OVERWORLD_LOCATION) : levelStem.typeHolder();
-        return withOverworld(options, holder, overworldGenerator);
+        LevelStem worlddimension = (LevelStem) options.get(LevelStem.OVERWORLD);
+        Holder<DimensionType> holder = worlddimension == null ? dimensionTypeRegistry.getOrCreateHolder(DimensionType.OVERWORLD_LOCATION) : worlddimension.typeHolder();
+
+        return WorldGenSettings.withOverworld(options, holder, overworldGenerator);
     }
 
     public static Registry<LevelStem> withOverworld(Registry<LevelStem> options, Holder<DimensionType> dimensionType, ChunkGenerator overworldGenerator) {
-        WritableRegistry<LevelStem> writableRegistry = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental(), (Function<LevelStem, Holder.Reference<LevelStem>>)null);
-        writableRegistry.register(LevelStem.OVERWORLD, new LevelStem(dimensionType, overworldGenerator), Lifecycle.stable());
+        WritableRegistry<LevelStem> iregistrywritable = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental(), (Function) null);
 
-        for(Entry<ResourceKey<LevelStem>, LevelStem> entry : options.entrySet()) {
-            ResourceKey<LevelStem> resourceKey = entry.getKey();
-            if (resourceKey != LevelStem.OVERWORLD) {
-                writableRegistry.register(resourceKey, entry.getValue(), options.lifecycle(entry.getValue()));
+        iregistrywritable.register(LevelStem.OVERWORLD, new LevelStem(dimensionType, overworldGenerator), Lifecycle.stable()); // CraftBukkit - decompile error
+        Iterator iterator = options.entrySet().iterator();
+
+        while (iterator.hasNext()) {
+            Entry<ResourceKey<LevelStem>, LevelStem> entry = (Entry) iterator.next();
+            ResourceKey<LevelStem> resourcekey = (ResourceKey) entry.getKey();
+
+            if (resourcekey != LevelStem.OVERWORLD) {
+                iregistrywritable.register(resourcekey, entry.getValue(), options.lifecycle(entry.getValue())); // CraftBukkit - decompile error
             }
         }
 
-        return writableRegistry;
+        return iregistrywritable;
     }
 
     public Registry<LevelStem> dimensions() {
@@ -143,16 +153,17 @@
     }
 
     public ChunkGenerator overworld() {
-        LevelStem levelStem = this.dimensions.get(LevelStem.OVERWORLD);
-        if (levelStem == null) {
+        LevelStem worlddimension = (LevelStem) this.dimensions.get(LevelStem.OVERWORLD);
+
+        if (worlddimension == null) {
             throw new IllegalStateException("Overworld settings missing");
         } else {
-            return levelStem.generator();
+            return worlddimension.generator();
         }
     }
 
     public ImmutableSet<ResourceKey<Level>> levels() {
-        return this.dimensions().entrySet().stream().map(Entry::getKey).map(WorldGenSettings::levelStemToLevel).collect(ImmutableSet.toImmutableSet());
+        return (ImmutableSet) this.dimensions().entrySet().stream().map(Entry::getKey).map(WorldGenSettings::levelStemToLevel).collect(ImmutableSet.toImmutableSet());
     }
 
     public static ResourceKey<Level> levelStemToLevel(ResourceKey<LevelStem> dimensionOptionsKey) {
@@ -188,54 +199,88 @@
     }
 
     public static WorldGenSettings create(RegistryAccess registryManager, DedicatedServerProperties.WorldGenProperties worldGenProperties) {
-        long l = parseSeed(worldGenProperties.levelSeed()).orElse((new Random()).nextLong());
-        Registry<DimensionType> registry = registryManager.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
-        Registry<Biome> registry2 = registryManager.registryOrThrow(Registry.BIOME_REGISTRY);
-        Registry<StructureSet> registry3 = registryManager.registryOrThrow(Registry.STRUCTURE_SET_REGISTRY);
-        Registry<LevelStem> registry4 = DimensionType.defaultDimensions(registryManager, l);
-        String var8 = worldGenProperties.levelType();
-        switch(var8) {
-        case "flat":
-            Dynamic<JsonElement> dynamic = new Dynamic<>(JsonOps.INSTANCE, worldGenProperties.generatorSettings());
-            return new WorldGenSettings(l, worldGenProperties.generateStructures(), false, withOverworld(registry, registry4, new FlatLevelSource(registry3, FlatLevelGeneratorSettings.CODEC.parse(dynamic).resultOrPartial(LOGGER::error).orElseGet(() -> {
-                return FlatLevelGeneratorSettings.getDefault(registry2, registry3);
-            }))));
-        case "debug_all_block_states":
-            return new WorldGenSettings(l, worldGenProperties.generateStructures(), false, withOverworld(registry, registry4, new DebugLevelSource(registry3, registry2)));
-        case "amplified":
-            return new WorldGenSettings(l, worldGenProperties.generateStructures(), false, withOverworld(registry, registry4, makeOverworld(registryManager, l, NoiseGeneratorSettings.AMPLIFIED)));
-        case "largebiomes":
-            return new WorldGenSettings(l, worldGenProperties.generateStructures(), false, withOverworld(registry, registry4, makeOverworld(registryManager, l, NoiseGeneratorSettings.LARGE_BIOMES)));
-        default:
-            return new WorldGenSettings(l, worldGenProperties.generateStructures(), false, withOverworld(registry, registry4, makeDefaultOverworld(registryManager, l)));
+        long i = WorldGenSettings.parseSeed(worldGenProperties.levelSeed()).orElse((new Random()).nextLong());
+        Registry<DimensionType> iregistry = registryManager.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
+        Registry<Biome> iregistry1 = registryManager.registryOrThrow(Registry.BIOME_REGISTRY);
+        Registry<StructureSet> iregistry2 = registryManager.registryOrThrow(Registry.STRUCTURE_SET_REGISTRY);
+        Registry<LevelStem> iregistry3 = DimensionType.defaultDimensions(registryManager, i);
+        String s = worldGenProperties.levelType();
+        byte b0 = -1;
+
+        switch (s.hashCode()) {
+            case -1100099890:
+                if (s.equals("largebiomes")) {
+                    b0 = 3;
+                }
+                break;
+            case 3145593:
+                if (s.equals("flat")) {
+                    b0 = 0;
+                }
+                break;
+            case 1045526590:
+                if (s.equals("debug_all_block_states")) {
+                    b0 = 1;
+                }
+                break;
+            case 1271599715:
+                if (s.equals("amplified")) {
+                    b0 = 2;
+                }
+        }
+
+        switch (b0) {
+            case 0:
+                Dynamic<JsonElement> dynamic = new Dynamic(RegistryOps.create(JsonOps.INSTANCE, registryManager), worldGenProperties.generatorSettings()); // CraftBukkit - Incorrect Ops
+                boolean flag = worldGenProperties.generateStructures();
+                DataResult dataresult = FlatLevelGeneratorSettings.CODEC.parse(dynamic);
+                Logger logger = WorldGenSettings.LOGGER;
+
+                Objects.requireNonNull(logger);
+                return new WorldGenSettings(i, flag, false, WorldGenSettings.withOverworld(iregistry, iregistry3, new FlatLevelSource(iregistry2, (FlatLevelGeneratorSettings) dataresult.resultOrPartial(s1 -> logger.error(String.valueOf(s1))).orElseGet(() -> { // CraftBukkit - decompile error
+                    return FlatLevelGeneratorSettings.getDefault(iregistry1, iregistry2);
+                }))));
+            case 1:
+                return new WorldGenSettings(i, worldGenProperties.generateStructures(), false, WorldGenSettings.withOverworld(iregistry, iregistry3, new DebugLevelSource(iregistry2, iregistry1)));
+            case 2:
+                return new WorldGenSettings(i, worldGenProperties.generateStructures(), false, WorldGenSettings.withOverworld(iregistry, iregistry3, WorldGenSettings.makeOverworld(registryManager, i, NoiseGeneratorSettings.AMPLIFIED)));
+            case 3:
+                return new WorldGenSettings(i, worldGenProperties.generateStructures(), false, WorldGenSettings.withOverworld(iregistry, iregistry3, WorldGenSettings.makeOverworld(registryManager, i, NoiseGeneratorSettings.LARGE_BIOMES)));
+            default:
+                return new WorldGenSettings(i, worldGenProperties.generateStructures(), false, WorldGenSettings.withOverworld(iregistry, iregistry3, WorldGenSettings.makeDefaultOverworld(registryManager, i)));
         }
     }
 
     public WorldGenSettings withSeed(boolean hardcore, OptionalLong seed) {
-        long l = seed.orElse(this.seed);
-        Registry<LevelStem> registry;
+        long i = seed.orElse(this.seed);
+        Object object;
+
         if (seed.isPresent()) {
-            WritableRegistry<LevelStem> writableRegistry = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental(), (Function<LevelStem, Holder.Reference<LevelStem>>)null);
-            long m = seed.getAsLong();
+            WritableRegistry<LevelStem> iregistrywritable = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental(), (Function) null);
+            long j = seed.getAsLong();
+            Iterator iterator = this.dimensions.entrySet().iterator();
 
-            for(Entry<ResourceKey<LevelStem>, LevelStem> entry : this.dimensions.entrySet()) {
-                ResourceKey<LevelStem> resourceKey = entry.getKey();
-                writableRegistry.register(resourceKey, new LevelStem(entry.getValue().typeHolder(), entry.getValue().generator().withSeed(m)), this.dimensions.lifecycle(entry.getValue()));
+            while (iterator.hasNext()) {
+                Entry<ResourceKey<LevelStem>, LevelStem> entry = (Entry) iterator.next();
+                ResourceKey<LevelStem> resourcekey = (ResourceKey) entry.getKey();
+
+                iregistrywritable.register(resourcekey, new LevelStem(entry.getValue().typeHolder(), entry.getValue().generator().withSeed(j)), this.dimensions.lifecycle(entry.getValue())); // CraftBukkit - decompile error
             }
 
-            registry = writableRegistry;
+            object = iregistrywritable;
         } else {
-            registry = this.dimensions;
+            object = this.dimensions;
         }
 
-        WorldGenSettings worldGenSettings;
+        WorldGenSettings generatorsettings;
+
         if (this.isDebug()) {
-            worldGenSettings = new WorldGenSettings(l, false, false, registry);
+            generatorsettings = new WorldGenSettings(i, false, false, (Registry) object);
         } else {
-            worldGenSettings = new WorldGenSettings(l, this.generateFeatures(), this.generateBonusChest() && !hardcore, registry);
+            generatorsettings = new WorldGenSettings(i, this.generateFeatures(), this.generateBonusChest() && !hardcore, (Registry) object);
         }
 
-        return worldGenSettings;
+        return generatorsettings;
     }
 
     public static OptionalLong parseSeed(String seed) {
@@ -245,8 +290,8 @@
         } else {
             try {
                 return OptionalLong.of(Long.parseLong(seed));
-            } catch (NumberFormatException var2) {
-                return OptionalLong.of((long)seed.hashCode());
+            } catch (NumberFormatException numberformatexception) {
+                return OptionalLong.of((long) seed.hashCode());
             }
         }
     }
