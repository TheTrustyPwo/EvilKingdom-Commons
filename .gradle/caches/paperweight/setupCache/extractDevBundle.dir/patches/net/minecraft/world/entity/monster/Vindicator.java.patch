--- a/net/minecraft/world/entity/monster/Vindicator.java
+++ b/net/minecraft/world/entity/monster/Vindicator.java
@@ -47,11 +47,12 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 
 public class Vindicator extends AbstractIllager {
+
     private static final String TAG_JOHNNY = "Johnny";
-    public static final Predicate<Difficulty> DOOR_BREAKING_PREDICATE = (difficulty) -> {
-        return difficulty == Difficulty.NORMAL || difficulty == Difficulty.HARD;
+    public static final Predicate<Difficulty> DOOR_BREAKING_PREDICATE = (enumdifficulty) -> {
+        return enumdifficulty == Difficulty.NORMAL || enumdifficulty == Difficulty.HARD;
     };
-    boolean isJohnny;
+    public boolean isJohnny; // PAIL
 
     public Vindicator(EntityType<? extends Vindicator> type, Level world) {
         super(type, world);
@@ -65,7 +66,7 @@
         this.goalSelector.addGoal(2, new AbstractIllager.RaiderOpenDoorGoal(this));
         this.goalSelector.addGoal(3, new Raider.HoldGroundAttackGoal(this, 10.0F));
         this.goalSelector.addGoal(4, new Vindicator.VindicatorMeleeAttackGoal(this));
-        this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, Raider.class)).setAlertOthers());
+        this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[]{Raider.class})).setAlertOthers());
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, true));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
@@ -78,15 +79,16 @@
     @Override
     protected void customServerAiStep() {
         if (!this.isNoAi() && GoalUtils.hasGroundPathNavigation(this)) {
-            boolean bl = ((ServerLevel)this.level).isRaided(this.blockPosition());
-            ((GroundPathNavigation)this.getNavigation()).setCanOpenDoors(bl);
+            boolean flag = ((ServerLevel) this.level).isRaided(this.blockPosition());
+
+            ((GroundPathNavigation) this.getNavigation()).setCanOpenDoors(flag);
         }
 
         super.customServerAiStep();
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Monster.createMonsterAttributes().add(Attributes.MOVEMENT_SPEED, (double)0.35F).add(Attributes.FOLLOW_RANGE, 12.0D).add(Attributes.MAX_HEALTH, 24.0D).add(Attributes.ATTACK_DAMAGE, 5.0D);
+        return Monster.createMonsterAttributes().add(Attributes.MOVEMENT_SPEED, 0.3499999940395355D).add(Attributes.FOLLOW_RANGE, 12.0D).add(Attributes.MAX_HEALTH, 24.0D).add(Attributes.ATTACK_DAMAGE, 5.0D);
     }
 
     @Override
@@ -100,11 +102,7 @@
 
     @Override
     public AbstractIllager.IllagerArmPose getArmPose() {
-        if (this.isAggressive()) {
-            return AbstractIllager.IllagerArmPose.ATTACKING;
-        } else {
-            return this.isCelebrating() ? AbstractIllager.IllagerArmPose.CELEBRATING : AbstractIllager.IllagerArmPose.CROSSED;
-        }
+        return this.isAggressive() ? AbstractIllager.IllagerArmPose.ATTACKING : (this.isCelebrating() ? AbstractIllager.IllagerArmPose.CELEBRATING : AbstractIllager.IllagerArmPose.CROSSED);
     }
 
     @Override
@@ -124,11 +122,12 @@
     @Nullable
     @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
-        SpawnGroupData spawnGroupData = super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
-        ((GroundPathNavigation)this.getNavigation()).setCanOpenDoors(true);
+        SpawnGroupData groupdataentity1 = super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
+
+        ((GroundPathNavigation) this.getNavigation()).setCanOpenDoors(true);
         this.populateDefaultEquipmentSlots(difficulty);
         this.populateDefaultEquipmentEnchantments(difficulty);
-        return spawnGroupData;
+        return groupdataentity1;
     }
 
     @Override
@@ -141,13 +140,7 @@
 
     @Override
     public boolean isAlliedTo(Entity other) {
-        if (super.isAlliedTo(other)) {
-            return true;
-        } else if (other instanceof LivingEntity && ((LivingEntity)other).getMobType() == MobType.ILLAGER) {
-            return this.getTeam() == null && other.getTeam() == null;
-        } else {
-            return false;
-        }
+        return super.isAlliedTo(other) ? true : (other instanceof LivingEntity && ((LivingEntity) other).getMobType() == MobType.ILLAGER ? this.getTeam() == null && other.getTeam() == null : false);
     }
 
     @Override
@@ -176,39 +169,45 @@
 
     @Override
     public void applyRaidBuffs(int wave, boolean unused) {
-        ItemStack itemStack = new ItemStack(Items.IRON_AXE);
+        ItemStack itemstack = new ItemStack(Items.IRON_AXE);
         Raid raid = this.getCurrentRaid();
-        int i = 1;
+        byte b0 = 1;
+
         if (wave > raid.getNumGroups(Difficulty.NORMAL)) {
-            i = 2;
+            b0 = 2;
         }
 
-        boolean bl = this.random.nextFloat() <= raid.getEnchantOdds();
-        if (bl) {
+        boolean flag1 = this.random.nextFloat() <= raid.getEnchantOdds();
+
+        if (flag1) {
             Map<Enchantment, Integer> map = Maps.newHashMap();
-            map.put(Enchantments.SHARPNESS, i);
-            EnchantmentHelper.setEnchantments(map, itemStack);
+
+            map.put(Enchantments.SHARPNESS, Integer.valueOf(b0));
+            EnchantmentHelper.setEnchantments(map, itemstack);
         }
 
-        this.setItemSlot(EquipmentSlot.MAINHAND, itemStack);
+        this.setItemSlot(EquipmentSlot.MAINHAND, itemstack);
     }
 
-    static class VindicatorBreakDoorGoal extends BreakDoorGoal {
+    private static class VindicatorBreakDoorGoal extends BreakDoorGoal {
+
         public VindicatorBreakDoorGoal(Mob mob) {
-            super(mob, 6, Vindicator.DOOR_BREAKING_PREDICATE);
+            super(mob, 6, com.google.common.base.Predicates.in(mob.level.paperConfig.vindicatorBreakDoors)); // Paper
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
         }
 
         @Override
         public boolean canContinueToUse() {
-            Vindicator vindicator = (Vindicator)this.mob;
-            return vindicator.hasActiveRaid() && super.canContinueToUse();
+            Vindicator entityvindicator = (Vindicator) this.mob;
+
+            return entityvindicator.hasActiveRaid() && super.canContinueToUse();
         }
 
         @Override
         public boolean canUse() {
-            Vindicator vindicator = (Vindicator)this.mob;
-            return vindicator.hasActiveRaid() && vindicator.random.nextInt(reducedTickDelay(10)) == 0 && super.canUse();
+            Vindicator entityvindicator = (Vindicator) this.mob;
+
+            return entityvindicator.hasActiveRaid() && entityvindicator.random.nextInt(reducedTickDelay(10)) == 0 && super.canUse();
         }
 
         @Override
@@ -218,14 +217,33 @@
         }
     }
 
-    static class VindicatorJohnnyAttackGoal extends NearestAttackableTargetGoal<LivingEntity> {
+    private class VindicatorMeleeAttackGoal extends MeleeAttackGoal {
+
+        public VindicatorMeleeAttackGoal(Vindicator entityvindicator) {
+            super(entityvindicator, 1.0D, false);
+        }
+
+        @Override
+        protected double getAttackReachSqr(LivingEntity entity) {
+            if (this.mob.getVehicle() instanceof Ravager) {
+                float f = this.mob.getVehicle().getBbWidth() - 0.1F;
+
+                return (double) (f * 2.0F * f * 2.0F + entity.getBbWidth());
+            } else {
+                return super.getAttackReachSqr(entity);
+            }
+        }
+    }
+
+    private static class VindicatorJohnnyAttackGoal extends NearestAttackableTargetGoal<LivingEntity> {
+
         public VindicatorJohnnyAttackGoal(Vindicator vindicator) {
             super(vindicator, LivingEntity.class, 0, true, true, LivingEntity::attackable);
         }
 
         @Override
         public boolean canUse() {
-            return ((Vindicator)this.mob).isJohnny && super.canUse();
+            return ((Vindicator) this.mob).isJohnny && super.canUse();
         }
 
         @Override
@@ -234,20 +252,4 @@
             this.mob.setNoActionTime(0);
         }
     }
-
-    class VindicatorMeleeAttackGoal extends MeleeAttackGoal {
-        public VindicatorMeleeAttackGoal(Vindicator vindicator) {
-            super(vindicator, 1.0D, false);
-        }
-
-        @Override
-        protected double getAttackReachSqr(LivingEntity entity) {
-            if (this.mob.getVehicle() instanceof Ravager) {
-                float f = this.mob.getVehicle().getBbWidth() - 0.1F;
-                return (double)(f * 2.0F * f * 2.0F + entity.getBbWidth());
-            } else {
-                return super.getAttackReachSqr(entity);
-            }
-        }
-    }
 }
