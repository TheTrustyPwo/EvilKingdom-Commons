--- a/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -1,10 +1,13 @@
+// keep
 package net.minecraft.world.level.levelgen;
 
 import com.google.common.collect.Sets;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.text.DecimalFormat;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.Set;
@@ -50,15 +53,16 @@
 import net.minecraft.world.level.levelgen.synth.NormalNoise;
 
 public final class NoiseBasedChunkGenerator extends ChunkGenerator {
+
     public static final Codec<NoiseBasedChunkGenerator> CODEC = RecordCodecBuilder.create((instance) -> {
-        return commonCodec(instance).and(instance.group(RegistryOps.retrieveRegistry(Registry.NOISE_REGISTRY).forGetter((generator) -> {
-            return generator.noises;
-        }), BiomeSource.CODEC.fieldOf("biome_source").forGetter((generator) -> {
-            return generator.biomeSource;
-        }), Codec.LONG.fieldOf("seed").stable().forGetter((generator) -> {
-            return generator.seed;
-        }), NoiseGeneratorSettings.CODEC.fieldOf("settings").forGetter((generator) -> {
-            return generator.settings;
+        return commonCodec(instance).and(instance.group(RegistryOps.retrieveRegistry(Registry.NOISE_REGISTRY).forGetter((chunkgeneratorabstract) -> {
+            return chunkgeneratorabstract.noises;
+        }), BiomeSource.CODEC.fieldOf("biome_source").forGetter((chunkgeneratorabstract) -> {
+            return chunkgeneratorabstract.biomeSource;
+        }), Codec.LONG.fieldOf("seed").stable().forGetter((chunkgeneratorabstract) -> {
+            return chunkgeneratorabstract.seed;
+        }), NoiseGeneratorSettings.CODEC.fieldOf("settings").forGetter((chunkgeneratorabstract) -> {
+            return chunkgeneratorabstract.settings;
         }))).apply(instance, instance.stable(NoiseBasedChunkGenerator::new));
     });
     private static final BlockState AIR = Blocks.AIR.defaultBlockState();
@@ -81,19 +85,22 @@
         this.noises = structuresRegistry;
         this.seed = seed;
         this.settings = settings;
-        NoiseGeneratorSettings noiseGeneratorSettings = this.settings.value();
-        this.defaultBlock = noiseGeneratorSettings.defaultBlock();
-        NoiseSettings noiseSettings = noiseGeneratorSettings.noiseSettings();
-        this.router = noiseGeneratorSettings.createNoiseRouter(structuresRegistry, seed);
+        NoiseGeneratorSettings generatorsettingbase = (NoiseGeneratorSettings) this.settings.value();
+
+        this.defaultBlock = generatorsettingbase.defaultBlock();
+        NoiseSettings noisesettings = generatorsettingbase.noiseSettings();
+
+        this.router = generatorsettingbase.createNoiseRouter(structuresRegistry, seed);
         this.sampler = new Climate.Sampler(this.router.temperature(), this.router.humidity(), this.router.continents(), this.router.erosion(), this.router.depth(), this.router.ridges(), this.router.spawnTarget());
-        Aquifer.FluidStatus fluidStatus = new Aquifer.FluidStatus(-54, Blocks.LAVA.defaultBlockState());
-        int i = noiseGeneratorSettings.seaLevel();
-        Aquifer.FluidStatus fluidStatus2 = new Aquifer.FluidStatus(i, noiseGeneratorSettings.defaultFluid());
-        Aquifer.FluidStatus fluidStatus3 = new Aquifer.FluidStatus(noiseSettings.minY() - 1, Blocks.AIR.defaultBlockState());
-        this.globalFluidPicker = (x, y, z) -> {
-            return y < Math.min(-54, i) ? fluidStatus : fluidStatus2;
+        Aquifer.FluidStatus aquifer_b = new Aquifer.FluidStatus(-54, Blocks.LAVA.defaultBlockState());
+        int j = generatorsettingbase.seaLevel();
+        Aquifer.FluidStatus aquifer_b1 = new Aquifer.FluidStatus(j, generatorsettingbase.defaultFluid());
+        Aquifer.FluidStatus aquifer_b2 = new Aquifer.FluidStatus(noisesettings.minY() - 1, Blocks.AIR.defaultBlockState());
+
+        this.globalFluidPicker = (k, l, i1) -> {
+            return l < Math.min(-54, j) ? aquifer_b : aquifer_b1;
         };
-        this.surfaceSystem = new SurfaceSystem(structuresRegistry, this.defaultBlock, i, seed, noiseGeneratorSettings.getRandomSource());
+        this.surfaceSystem = new SurfaceSystem(structuresRegistry, this.defaultBlock, j, seed, generatorsettingbase.getRandomSource());
     }
 
     @Override
@@ -105,11 +112,12 @@
     }
 
     private void doCreateBiomes(Blender blender, StructureFeatureManager structureAccessor, ChunkAccess chunk) {
-        NoiseChunk noiseChunk = chunk.getOrCreateNoiseChunk(this.router, () -> {
+        NoiseChunk noisechunk = chunk.getOrCreateNoiseChunk(this.router, () -> {
             return new Beardifier(structureAccessor, chunk);
-        }, this.settings.value(), this.globalFluidPicker, blender);
-        BiomeResolver biomeResolver = BelowZeroRetrogen.getBiomeResolver(blender.getBiomeResolver(this.runtimeBiomeSource), chunk);
-        chunk.fillBiomesFromNoise(biomeResolver, noiseChunk.cachedClimateSampler(this.router));
+        }, (NoiseGeneratorSettings) this.settings.value(), this.globalFluidPicker, blender);
+        BiomeResolver biomeresolver = BelowZeroRetrogen.getBiomeResolver(blender.getBiomeResolver(this.runtimeBiomeSource), chunk);
+
+        chunk.fillBiomesFromNoise(biomeresolver, noisechunk.cachedClimateSampler(this.router));
     }
 
     @VisibleForDebug
@@ -124,7 +132,7 @@
 
     @Override
     protected Codec<? extends ChunkGenerator> codec() {
-        return CODEC;
+        return NoiseBasedChunkGenerator.CODEC;
     }
 
     @Override
@@ -138,126 +146,137 @@
 
     @Override
     public int getBaseHeight(int x, int z, Heightmap.Types heightmap, LevelHeightAccessor world) {
-        NoiseSettings noiseSettings = this.settings.value().noiseSettings();
-        int i = Math.max(noiseSettings.minY(), world.getMinBuildHeight());
-        int j = Math.min(noiseSettings.minY() + noiseSettings.height(), world.getMaxBuildHeight());
-        int k = Mth.intFloorDiv(i, noiseSettings.getCellHeight());
-        int l = Mth.intFloorDiv(j - i, noiseSettings.getCellHeight());
-        return l <= 0 ? world.getMinBuildHeight() : this.iterateNoiseColumn(x, z, (BlockState[])null, heightmap.isOpaque(), k, l).orElse(world.getMinBuildHeight());
+        NoiseSettings noisesettings = ((NoiseGeneratorSettings) this.settings.value()).noiseSettings();
+        int k = Math.max(noisesettings.minY(), world.getMinBuildHeight());
+        int l = Math.min(noisesettings.minY() + noisesettings.height(), world.getMaxBuildHeight());
+        int i1 = Mth.intFloorDiv(k, noisesettings.getCellHeight());
+        int j1 = Mth.intFloorDiv(l - k, noisesettings.getCellHeight());
+
+        return j1 <= 0 ? world.getMinBuildHeight() : this.iterateNoiseColumn(x, z, (BlockState[]) null, heightmap.isOpaque(), i1, j1).orElse(world.getMinBuildHeight());
     }
 
     @Override
     public NoiseColumn getBaseColumn(int x, int z, LevelHeightAccessor world) {
-        NoiseSettings noiseSettings = this.settings.value().noiseSettings();
-        int i = Math.max(noiseSettings.minY(), world.getMinBuildHeight());
-        int j = Math.min(noiseSettings.minY() + noiseSettings.height(), world.getMaxBuildHeight());
-        int k = Mth.intFloorDiv(i, noiseSettings.getCellHeight());
-        int l = Mth.intFloorDiv(j - i, noiseSettings.getCellHeight());
-        if (l <= 0) {
-            return new NoiseColumn(i, EMPTY_COLUMN);
+        NoiseSettings noisesettings = ((NoiseGeneratorSettings) this.settings.value()).noiseSettings();
+        int k = Math.max(noisesettings.minY(), world.getMinBuildHeight());
+        int l = Math.min(noisesettings.minY() + noisesettings.height(), world.getMaxBuildHeight());
+        int i1 = Mth.intFloorDiv(k, noisesettings.getCellHeight());
+        int j1 = Mth.intFloorDiv(l - k, noisesettings.getCellHeight());
+
+        if (j1 <= 0) {
+            return new NoiseColumn(k, NoiseBasedChunkGenerator.EMPTY_COLUMN);
         } else {
-            BlockState[] blockStates = new BlockState[l * noiseSettings.getCellHeight()];
-            this.iterateNoiseColumn(x, z, blockStates, (Predicate<BlockState>)null, k, l);
-            return new NoiseColumn(i, blockStates);
+            BlockState[] aiblockdata = new BlockState[j1 * noisesettings.getCellHeight()];
+
+            this.iterateNoiseColumn(x, z, aiblockdata, (Predicate) null, i1, j1);
+            return new NoiseColumn(k, aiblockdata);
         }
     }
 
     @Override
     public void addDebugScreenInfo(List<String> text, BlockPos pos) {
-        DecimalFormat decimalFormat = new DecimalFormat("0.000");
-        DensityFunction.SinglePointContext singlePointContext = new DensityFunction.SinglePointContext(pos.getX(), pos.getY(), pos.getZ());
-        double d = this.router.ridges().compute(singlePointContext);
-        text.add("NoiseRouter T: " + decimalFormat.format(this.router.temperature().compute(singlePointContext)) + " H: " + decimalFormat.format(this.router.humidity().compute(singlePointContext)) + " C: " + decimalFormat.format(this.router.continents().compute(singlePointContext)) + " E: " + decimalFormat.format(this.router.erosion().compute(singlePointContext)) + " D: " + decimalFormat.format(this.router.depth().compute(singlePointContext)) + " W: " + decimalFormat.format(d) + " PV: " + decimalFormat.format((double)TerrainShaper.peaksAndValleys((float)d)) + " AS: " + decimalFormat.format(this.router.initialDensityWithoutJaggedness().compute(singlePointContext)) + " N: " + decimalFormat.format(this.router.finalDensity().compute(singlePointContext)));
+        DecimalFormat decimalformat = new DecimalFormat("0.000");
+        DensityFunction.SinglePointContext densityfunction_d = new DensityFunction.SinglePointContext(pos.getX(), pos.getY(), pos.getZ());
+        double d0 = this.router.ridges().compute(densityfunction_d);
+        String s = decimalformat.format(this.router.temperature().compute(densityfunction_d));
+
+        text.add("NoiseRouter T: " + s + " H: " + decimalformat.format(this.router.humidity().compute(densityfunction_d)) + " C: " + decimalformat.format(this.router.continents().compute(densityfunction_d)) + " E: " + decimalformat.format(this.router.erosion().compute(densityfunction_d)) + " D: " + decimalformat.format(this.router.depth().compute(densityfunction_d)) + " W: " + decimalformat.format(d0) + " PV: " + decimalformat.format((double) TerrainShaper.peaksAndValleys((float) d0)) + " AS: " + decimalformat.format(this.router.initialDensityWithoutJaggedness().compute(densityfunction_d)) + " N: " + decimalformat.format(this.router.finalDensity().compute(densityfunction_d)));
     }
 
     private OptionalInt iterateNoiseColumn(int i, int j, @Nullable BlockState[] states, @Nullable Predicate<BlockState> predicate, int k, int l) {
-        NoiseSettings noiseSettings = this.settings.value().noiseSettings();
-        int m = noiseSettings.getCellWidth();
-        int n = noiseSettings.getCellHeight();
-        int o = Math.floorDiv(i, m);
-        int p = Math.floorDiv(j, m);
-        int q = Math.floorMod(i, m);
-        int r = Math.floorMod(j, m);
-        int s = o * m;
-        int t = p * m;
-        double d = (double)q / (double)m;
-        double e = (double)r / (double)m;
-        NoiseChunk noiseChunk = NoiseChunk.forColumn(s, t, k, l, this.router, this.settings.value(), this.globalFluidPicker);
-        noiseChunk.initializeForFirstCellX();
-        noiseChunk.advanceCellX(0);
+        NoiseSettings noisesettings = ((NoiseGeneratorSettings) this.settings.value()).noiseSettings();
+        int i1 = noisesettings.getCellWidth();
+        int j1 = noisesettings.getCellHeight();
+        int k1 = Math.floorDiv(i, i1);
+        int l1 = Math.floorDiv(j, i1);
+        int i2 = Math.floorMod(i, i1);
+        int j2 = Math.floorMod(j, i1);
+        int k2 = k1 * i1;
+        int l2 = l1 * i1;
+        double d0 = (double) i2 / (double) i1;
+        double d1 = (double) j2 / (double) i1;
+        NoiseChunk noisechunk = NoiseChunk.forColumn(k2, l2, k, l, this.router, (NoiseGeneratorSettings) this.settings.value(), this.globalFluidPicker);
 
-        for(int u = l - 1; u >= 0; --u) {
-            noiseChunk.selectCellYZ(u, 0);
+        noisechunk.initializeForFirstCellX();
+        noisechunk.advanceCellX(0);
+
+        for (int i3 = l - 1; i3 >= 0; --i3) {
+            noisechunk.selectCellYZ(i3, 0);
+
+            for (int j3 = j1 - 1; j3 >= 0; --j3) {
+                int k3 = (k + i3) * j1 + j3;
+                double d2 = (double) j3 / (double) j1;
+
+                noisechunk.updateForY(k3, d2);
+                noisechunk.updateForX(i, d0);
+                noisechunk.updateForZ(j, d1);
+                BlockState iblockdata = noisechunk.getInterpolatedState();
+                BlockState iblockdata1 = iblockdata == null ? this.defaultBlock : iblockdata;
 
-            for(int v = n - 1; v >= 0; --v) {
-                int w = (k + u) * n + v;
-                double f = (double)v / (double)n;
-                noiseChunk.updateForY(w, f);
-                noiseChunk.updateForX(i, d);
-                noiseChunk.updateForZ(j, e);
-                BlockState blockState = noiseChunk.getInterpolatedState();
-                BlockState blockState2 = blockState == null ? this.defaultBlock : blockState;
                 if (states != null) {
-                    int x = u * n + v;
-                    states[x] = blockState2;
+                    int l3 = i3 * j1 + j3;
+
+                    states[l3] = iblockdata1;
                 }
 
-                if (predicate != null && predicate.test(blockState2)) {
-                    noiseChunk.stopInterpolation();
-                    return OptionalInt.of(w + 1);
+                if (predicate != null && predicate.test(iblockdata1)) {
+                    noisechunk.stopInterpolation();
+                    return OptionalInt.of(k3 + 1);
                 }
             }
         }
 
-        noiseChunk.stopInterpolation();
+        noisechunk.stopInterpolation();
         return OptionalInt.empty();
     }
 
     @Override
     public void buildSurface(WorldGenRegion region, StructureFeatureManager structures, ChunkAccess chunk) {
         if (!SharedConstants.debugVoidTerrain(chunk.getPos())) {
-            WorldGenerationContext worldGenerationContext = new WorldGenerationContext(this, region);
-            NoiseGeneratorSettings noiseGeneratorSettings = this.settings.value();
-            NoiseChunk noiseChunk = chunk.getOrCreateNoiseChunk(this.router, () -> {
+            WorldGenerationContext worldgenerationcontext = new WorldGenerationContext(this, region, region.getMinecraftWorld()); // Paper
+            NoiseGeneratorSettings generatorsettingbase = (NoiseGeneratorSettings) this.settings.value();
+            NoiseChunk noisechunk = chunk.getOrCreateNoiseChunk(this.router, () -> {
                 return new Beardifier(structures, chunk);
-            }, noiseGeneratorSettings, this.globalFluidPicker, Blender.of(region));
-            this.surfaceSystem.buildSurface(region.getBiomeManager(), region.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY), noiseGeneratorSettings.useLegacyRandomSource(), worldGenerationContext, chunk, noiseChunk, noiseGeneratorSettings.surfaceRule());
+            }, generatorsettingbase, this.globalFluidPicker, Blender.of(region));
+
+            this.surfaceSystem.buildSurface(region.getBiomeManager(), region.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY), generatorsettingbase.useLegacyRandomSource(), worldgenerationcontext, chunk, noisechunk, generatorsettingbase.surfaceRule());
         }
     }
 
     @Override
     public void applyCarvers(WorldGenRegion chunkRegion, long seed, BiomeManager biomeAccess, StructureFeatureManager structureAccessor, ChunkAccess chunk, GenerationStep.Carving generationStep) {
-        BiomeManager biomeManager = biomeAccess.withDifferentSource((x, y, z) -> {
-            return this.biomeSource.getNoiseBiome(x, y, z, this.climateSampler());
+        BiomeManager biomemanager1 = biomeAccess.withDifferentSource((j, k, l) -> {
+            return this.biomeSource.getNoiseBiome(j, k, l, this.climateSampler());
         });
-        WorldgenRandom worldgenRandom = new WorldgenRandom(new LegacyRandomSource(RandomSupport.seedUniquifier()));
-        int i = 8;
-        ChunkPos chunkPos = chunk.getPos();
-        NoiseChunk noiseChunk = chunk.getOrCreateNoiseChunk(this.router, () -> {
+        WorldgenRandom seededrandom = new WorldgenRandom(new LegacyRandomSource(RandomSupport.seedUniquifier()));
+        boolean flag = true;
+        ChunkPos chunkcoordintpair = chunk.getPos();
+        NoiseChunk noisechunk = chunk.getOrCreateNoiseChunk(this.router, () -> {
             return new Beardifier(structureAccessor, chunk);
-        }, this.settings.value(), this.globalFluidPicker, Blender.of(chunkRegion));
-        Aquifer aquifer = noiseChunk.aquifer();
-        CarvingContext carvingContext = new CarvingContext(this, chunkRegion.registryAccess(), chunk.getHeightAccessorForGeneration(), noiseChunk);
-        CarvingMask carvingMask = ((ProtoChunk)chunk).getOrCreateCarvingMask(generationStep);
+        }, (NoiseGeneratorSettings) this.settings.value(), this.globalFluidPicker, Blender.of(chunkRegion));
+        Aquifer aquifer = noisechunk.aquifer();
+        CarvingContext carvingcontext = new CarvingContext(this, chunkRegion.registryAccess(), chunk.getHeightAccessorForGeneration(), noisechunk, chunkRegion.getMinecraftWorld()); // Paper
+        CarvingMask carvingmask = ((ProtoChunk) chunk).getOrCreateCarvingMask(generationStep);
 
-        for(int j = -8; j <= 8; ++j) {
-            for(int k = -8; k <= 8; ++k) {
-                ChunkPos chunkPos2 = new ChunkPos(chunkPos.x + j, chunkPos.z + k);
-                ChunkAccess chunkAccess = chunkRegion.getChunk(chunkPos2.x, chunkPos2.z);
-                BiomeGenerationSettings biomeGenerationSettings = chunkAccess.carverBiome(() -> {
-                    return this.biomeSource.getNoiseBiome(QuartPos.fromBlock(chunkPos2.getMinBlockX()), 0, QuartPos.fromBlock(chunkPos2.getMinBlockZ()), this.climateSampler());
-                }).value().getGenerationSettings();
-                Iterable<Holder<ConfiguredWorldCarver<?>>> iterable = biomeGenerationSettings.getCarvers(generationStep);
+        for (int j = -8; j <= 8; ++j) {
+            for (int k = -8; k <= 8; ++k) {
+                ChunkPos chunkcoordintpair1 = new ChunkPos(chunkcoordintpair.x + j, chunkcoordintpair.z + k);
+                ChunkAccess ichunkaccess1 = chunkRegion.getChunk(chunkcoordintpair1.x, chunkcoordintpair1.z);
+                BiomeGenerationSettings biomesettingsgeneration = ((Biome) ichunkaccess1.carverBiome(() -> {
+                    return this.biomeSource.getNoiseBiome(QuartPos.fromBlock(chunkcoordintpair1.getMinBlockX()), 0, QuartPos.fromBlock(chunkcoordintpair1.getMinBlockZ()), this.climateSampler());
+                }).value()).getGenerationSettings();
+                Iterable<Holder<ConfiguredWorldCarver<?>>> iterable = biomesettingsgeneration.getCarvers(generationStep);
                 int l = 0;
 
-                for(Holder<ConfiguredWorldCarver<?>> holder : iterable) {
-                    ConfiguredWorldCarver<?> configuredWorldCarver = holder.value();
-                    worldgenRandom.setLargeFeatureSeed(seed + (long)l, chunkPos2.x, chunkPos2.z);
-                    if (configuredWorldCarver.isStartChunk(worldgenRandom)) {
-                        configuredWorldCarver.carve(carvingContext, chunk, biomeManager::getBiome, worldgenRandom, aquifer, chunkPos2, carvingMask);
-                    }
+                for (Iterator iterator = iterable.iterator(); iterator.hasNext(); ++l) {
+                    Holder<ConfiguredWorldCarver<?>> holder = (Holder) iterator.next();
+                    ConfiguredWorldCarver<?> worldgencarverwrapper = (ConfiguredWorldCarver) holder.value();
 
-                    ++l;
+                    seededrandom.setLargeFeatureSeed(seed + (long) l, chunkcoordintpair1.x, chunkcoordintpair1.z);
+                    if (worldgencarverwrapper.isStartChunk(seededrandom)) {
+                        Objects.requireNonNull(biomemanager1);
+                        worldgencarverwrapper.carve(carvingcontext, chunk, biomemanager1::getBiome, seededrandom, aquifer, chunkcoordintpair1, carvingmask);
+                    }
                 }
             }
         }
@@ -266,30 +285,36 @@
 
     @Override
     public CompletableFuture<ChunkAccess> fillFromNoise(Executor executor, Blender blender, StructureFeatureManager structureAccessor, ChunkAccess chunk) {
-        NoiseSettings noiseSettings = this.settings.value().noiseSettings();
-        LevelHeightAccessor levelHeightAccessor = chunk.getHeightAccessorForGeneration();
-        int i = Math.max(noiseSettings.minY(), levelHeightAccessor.getMinBuildHeight());
-        int j = Math.min(noiseSettings.minY() + noiseSettings.height(), levelHeightAccessor.getMaxBuildHeight());
-        int k = Mth.intFloorDiv(i, noiseSettings.getCellHeight());
-        int l = Mth.intFloorDiv(j - i, noiseSettings.getCellHeight());
+        NoiseSettings noisesettings = ((NoiseGeneratorSettings) this.settings.value()).noiseSettings();
+        LevelHeightAccessor levelheightaccessor = chunk.getHeightAccessorForGeneration();
+        int i = Math.max(noisesettings.minY(), levelheightaccessor.getMinBuildHeight());
+        int j = Math.min(noisesettings.minY() + noisesettings.height(), levelheightaccessor.getMaxBuildHeight());
+        int k = Mth.intFloorDiv(i, noisesettings.getCellHeight());
+        int l = Mth.intFloorDiv(j - i, noisesettings.getCellHeight());
+
         if (l <= 0) {
             return CompletableFuture.completedFuture(chunk);
         } else {
-            int m = chunk.getSectionIndex(l * noiseSettings.getCellHeight() - 1 + i);
-            int n = chunk.getSectionIndex(i);
+            int i1 = chunk.getSectionIndex(l * noisesettings.getCellHeight() - 1 + i);
+            int j1 = chunk.getSectionIndex(i);
             Set<LevelChunkSection> set = Sets.newHashSet();
 
-            for(int o = m; o >= n; --o) {
-                LevelChunkSection levelChunkSection = chunk.getSection(o);
-                levelChunkSection.acquire();
-                set.add(levelChunkSection);
+            for (int k1 = i1; k1 >= j1; --k1) {
+                LevelChunkSection chunksection = chunk.getSection(k1);
+
+                chunksection.acquire();
+                set.add(chunksection);
             }
 
             return CompletableFuture.supplyAsync(Util.wrapThreadWithTaskName("wgen_fill_noise", () -> {
                 return this.doFill(blender, structureAccessor, chunk, k, l);
-            }), Util.backgroundExecutor()).whenCompleteAsync((chunkAccess, throwable) -> {
-                for(LevelChunkSection levelChunkSection : set) {
-                    levelChunkSection.release();
+            }), Util.backgroundExecutor()).whenCompleteAsync((ichunkaccess1, throwable) -> {
+                Iterator iterator = set.iterator();
+
+                while (iterator.hasNext()) {
+                    LevelChunkSection chunksection1 = (LevelChunkSection) iterator.next();
+
+                    chunksection1.release();
                 }
 
             }, executor);
@@ -297,73 +322,79 @@
     }
 
     private ChunkAccess doFill(Blender blender, StructureFeatureManager structureAccessor, ChunkAccess chunk, int i, int j) {
-        NoiseGeneratorSettings noiseGeneratorSettings = this.settings.value();
-        NoiseChunk noiseChunk = chunk.getOrCreateNoiseChunk(this.router, () -> {
+        NoiseGeneratorSettings generatorsettingbase = (NoiseGeneratorSettings) this.settings.value();
+        NoiseChunk noisechunk = chunk.getOrCreateNoiseChunk(this.router, () -> {
             return new Beardifier(structureAccessor, chunk);
-        }, noiseGeneratorSettings, this.globalFluidPicker, blender);
+        }, generatorsettingbase, this.globalFluidPicker, blender);
         Heightmap heightmap = chunk.getOrCreateHeightmapUnprimed(Heightmap.Types.OCEAN_FLOOR_WG);
-        Heightmap heightmap2 = chunk.getOrCreateHeightmapUnprimed(Heightmap.Types.WORLD_SURFACE_WG);
-        ChunkPos chunkPos = chunk.getPos();
-        int k = chunkPos.getMinBlockX();
-        int l = chunkPos.getMinBlockZ();
-        Aquifer aquifer = noiseChunk.aquifer();
-        noiseChunk.initializeForFirstCellX();
-        BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
-        NoiseSettings noiseSettings = noiseGeneratorSettings.noiseSettings();
-        int m = noiseSettings.getCellWidth();
-        int n = noiseSettings.getCellHeight();
-        int o = 16 / m;
-        int p = 16 / m;
+        Heightmap heightmap1 = chunk.getOrCreateHeightmapUnprimed(Heightmap.Types.WORLD_SURFACE_WG);
+        ChunkPos chunkcoordintpair = chunk.getPos();
+        int k = chunkcoordintpair.getMinBlockX();
+        int l = chunkcoordintpair.getMinBlockZ();
+        Aquifer aquifer = noisechunk.aquifer();
 
-        for(int q = 0; q < o; ++q) {
-            noiseChunk.advanceCellX(q);
+        noisechunk.initializeForFirstCellX();
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+        NoiseSettings noisesettings = generatorsettingbase.noiseSettings();
+        int i1 = noisesettings.getCellWidth();
+        int j1 = noisesettings.getCellHeight();
+        int k1 = 16 / i1;
+        int l1 = 16 / i1;
 
-            for(int r = 0; r < p; ++r) {
-                LevelChunkSection levelChunkSection = chunk.getSection(chunk.getSectionsCount() - 1);
+        for (int i2 = 0; i2 < k1; ++i2) {
+            noisechunk.advanceCellX(i2);
 
-                for(int s = j - 1; s >= 0; --s) {
-                    noiseChunk.selectCellYZ(s, r);
+            for (int j2 = 0; j2 < l1; ++j2) {
+                LevelChunkSection chunksection = chunk.getSection(chunk.getSectionsCount() - 1);
 
-                    for(int t = n - 1; t >= 0; --t) {
-                        int u = (i + s) * n + t;
-                        int v = u & 15;
-                        int w = chunk.getSectionIndex(u);
-                        if (chunk.getSectionIndex(levelChunkSection.bottomBlockY()) != w) {
-                            levelChunkSection = chunk.getSection(w);
+                for (int k2 = j - 1; k2 >= 0; --k2) {
+                    noisechunk.selectCellYZ(k2, j2);
+
+                    for (int l2 = j1 - 1; l2 >= 0; --l2) {
+                        int i3 = (i + k2) * j1 + l2;
+                        int j3 = i3 & 15;
+                        int k3 = chunk.getSectionIndex(i3);
+
+                        if (chunk.getSectionIndex(chunksection.bottomBlockY()) != k3) {
+                            chunksection = chunk.getSection(k3);
                         }
 
-                        double d = (double)t / (double)n;
-                        noiseChunk.updateForY(u, d);
+                        double d0 = (double) l2 / (double) j1;
 
-                        for(int x = 0; x < m; ++x) {
-                            int y = k + q * m + x;
-                            int z = y & 15;
-                            double e = (double)x / (double)m;
-                            noiseChunk.updateForX(y, e);
+                        noisechunk.updateForY(i3, d0);
 
-                            for(int aa = 0; aa < m; ++aa) {
-                                int ab = l + r * m + aa;
-                                int ac = ab & 15;
-                                double f = (double)aa / (double)m;
-                                noiseChunk.updateForZ(ab, f);
-                                BlockState blockState = noiseChunk.getInterpolatedState();
-                                if (blockState == null) {
-                                    blockState = this.defaultBlock;
+                        for (int l3 = 0; l3 < i1; ++l3) {
+                            int i4 = k + i2 * i1 + l3;
+                            int j4 = i4 & 15;
+                            double d1 = (double) l3 / (double) i1;
+
+                            noisechunk.updateForX(i4, d1);
+
+                            for (int k4 = 0; k4 < i1; ++k4) {
+                                int l4 = l + j2 * i1 + k4;
+                                int i5 = l4 & 15;
+                                double d2 = (double) k4 / (double) i1;
+
+                                noisechunk.updateForZ(l4, d2);
+                                BlockState iblockdata = noisechunk.getInterpolatedState();
+
+                                if (iblockdata == null) {
+                                    iblockdata = this.defaultBlock;
                                 }
 
-                                blockState = this.debugPreliminarySurfaceLevel(noiseChunk, y, u, ab, blockState);
-                                if (blockState != AIR && !SharedConstants.debugVoidTerrain(chunk.getPos())) {
-                                    if (blockState.getLightEmission() != 0 && chunk instanceof ProtoChunk) {
-                                        mutableBlockPos.set(y, u, ab);
-                                        ((ProtoChunk)chunk).addLight(mutableBlockPos);
+                                iblockdata = this.debugPreliminarySurfaceLevel(noisechunk, i4, i3, l4, iblockdata);
+                                if (iblockdata != NoiseBasedChunkGenerator.AIR && !SharedConstants.debugVoidTerrain(chunk.getPos())) {
+                                    if (iblockdata.getLightEmission() != 0 && chunk instanceof ProtoChunk) {
+                                        blockposition_mutableblockposition.set(i4, i3, l4);
+                                        ((ProtoChunk) chunk).addLight(blockposition_mutableblockposition);
                                     }
 
-                                    levelChunkSection.setBlockState(z, v, ac, blockState, false);
-                                    heightmap.update(z, u, ac, blockState);
-                                    heightmap2.update(z, u, ac, blockState);
-                                    if (aquifer.shouldScheduleFluidUpdate() && !blockState.getFluidState().isEmpty()) {
-                                        mutableBlockPos.set(y, u, ab);
-                                        chunk.markPosForPostprocessing(mutableBlockPos);
+                                    chunksection.setBlockState(j4, j3, i5, iblockdata, false);
+                                    heightmap.update(j4, i3, i5, iblockdata);
+                                    heightmap1.update(j4, i3, i5, iblockdata);
+                                    if (aquifer.shouldScheduleFluidUpdate() && !iblockdata.getFluidState().isEmpty()) {
+                                        blockposition_mutableblockposition.set(i4, i3, l4);
+                                        chunk.markPosForPostprocessing(blockposition_mutableblockposition);
                                     }
                                 }
                             }
@@ -372,10 +403,10 @@
                 }
             }
 
-            noiseChunk.swapSlices();
+            noisechunk.swapSlices();
         }
 
-        noiseChunk.stopInterpolation();
+        noisechunk.stopInterpolation();
         return chunk;
     }
 
@@ -385,33 +416,34 @@
 
     @Override
     public int getGenDepth() {
-        return this.settings.value().noiseSettings().height();
+        return ((NoiseGeneratorSettings) this.settings.value()).noiseSettings().height();
     }
 
     @Override
     public int getSeaLevel() {
-        return this.settings.value().seaLevel();
+        return ((NoiseGeneratorSettings) this.settings.value()).seaLevel();
     }
 
     @Override
     public int getMinY() {
-        return this.settings.value().noiseSettings().minY();
+        return ((NoiseGeneratorSettings) this.settings.value()).noiseSettings().minY();
     }
 
     @Override
     public void spawnOriginalMobs(WorldGenRegion region) {
-        if (!this.settings.value().disableMobGeneration()) {
-            ChunkPos chunkPos = region.getCenter();
-            Holder<Biome> holder = region.getBiome(chunkPos.getWorldPosition().atY(region.getMaxBuildHeight() - 1));
-            WorldgenRandom worldgenRandom = new WorldgenRandom(new LegacyRandomSource(RandomSupport.seedUniquifier()));
-            worldgenRandom.setDecorationSeed(region.getSeed(), chunkPos.getMinBlockX(), chunkPos.getMinBlockZ());
-            NaturalSpawner.spawnMobsForChunkGeneration(region, holder, chunkPos, worldgenRandom);
+        if (!((NoiseGeneratorSettings) this.settings.value()).disableMobGeneration()) {
+            ChunkPos chunkcoordintpair = region.getCenter();
+            Holder<Biome> holder = region.getBiome(chunkcoordintpair.getWorldPosition().atY(region.getMaxBuildHeight() - 1));
+            WorldgenRandom seededrandom = new WorldgenRandom(new LegacyRandomSource(RandomSupport.seedUniquifier()));
+
+            seededrandom.setDecorationSeed(region.getSeed(), chunkcoordintpair.getMinBlockX(), chunkcoordintpair.getMinBlockZ());
+            NaturalSpawner.spawnMobsForChunkGeneration(region, holder, chunkcoordintpair, seededrandom);
         }
     }
 
     /** @deprecated */
     @Deprecated
     public Optional<BlockState> topMaterial(CarvingContext context, Function<BlockPos, Holder<Biome>> posToBiome, ChunkAccess chunk, NoiseChunk chunkNoiseSampler, BlockPos pos, boolean hasFluid) {
-        return this.surfaceSystem.topMaterial(this.settings.value().surfaceRule(), context, posToBiome, chunk, chunkNoiseSampler, pos, hasFluid);
+        return this.surfaceSystem.topMaterial(((NoiseGeneratorSettings) this.settings.value()).surfaceRule(), context, posToBiome, chunk, chunkNoiseSampler, pos, hasFluid);
     }
 }
