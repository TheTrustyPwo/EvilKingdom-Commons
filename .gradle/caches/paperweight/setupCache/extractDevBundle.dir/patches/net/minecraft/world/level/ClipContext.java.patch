--- a/net/minecraft/world/level/ClipContext.java
+++ b/net/minecraft/world/level/ClipContext.java
@@ -14,6 +14,7 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class ClipContext {
+
     private final Vec3 from;
     private final Vec3 to;
     private final ClipContext.Block block;
@@ -25,7 +26,7 @@
         this.to = end;
         this.block = shapeType;
         this.fluid = fluidHandling;
-        this.collisionContext = CollisionContext.of(entity);
+        this.collisionContext = (entity == null) ? CollisionContext.empty() : CollisionContext.of(entity); // CraftBukkit
     }
 
     public Vec3 getTo() {
@@ -45,17 +46,15 @@
     }
 
     public static enum Block implements ClipContext.ShapeGetter {
-        COLLIDER(BlockBehaviour.BlockStateBase::getCollisionShape),
-        OUTLINE(BlockBehaviour.BlockStateBase::getShape),
-        VISUAL(BlockBehaviour.BlockStateBase::getVisualShape),
-        FALLDAMAGE_RESETTING((state, world, pos, context) -> {
-            return state.is(BlockTags.FALL_DAMAGE_RESETTING) ? Shapes.block() : Shapes.empty();
+
+        COLLIDER(BlockBehaviour.BlockStateBase::getCollisionShape), OUTLINE(BlockBehaviour.BlockStateBase::getShape), VISUAL(BlockBehaviour.BlockStateBase::getVisualShape), FALLDAMAGE_RESETTING((iblockdata, iblockaccess, blockposition, voxelshapecollision) -> {
+            return iblockdata.is(BlockTags.FALL_DAMAGE_RESETTING) ? Shapes.block() : Shapes.empty();
         });
 
         private final ClipContext.ShapeGetter shapeGetter;
 
-        private Block(ClipContext.ShapeGetter provider) {
-            this.shapeGetter = provider;
+        private Block(ClipContext.ShapeGetter raytrace_c) {
+            this.shapeGetter = raytrace_c;
         }
 
         @Override
@@ -65,20 +64,18 @@
     }
 
     public static enum Fluid {
-        NONE((state) -> {
+
+        NONE((fluid) -> {
             return false;
-        }),
-        SOURCE_ONLY(FluidState::isSource),
-        ANY((state) -> {
-            return !state.isEmpty();
-        }),
-        WATER((state) -> {
-            return state.is(FluidTags.WATER);
+        }), SOURCE_ONLY(FluidState::isSource), ANY((fluid) -> {
+            return !fluid.isEmpty();
+        }), WATER((fluid) -> {
+            return fluid.is(FluidTags.WATER);
         });
 
         private final Predicate<FluidState> canPick;
 
-        private Fluid(Predicate<FluidState> predicate) {
+        private Fluid(Predicate<FluidState> predicate) { // CraftBukkit - decompile error
             this.canPick = predicate;
         }
 
@@ -88,6 +85,7 @@
     }
 
     public interface ShapeGetter {
+
         VoxelShape get(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context);
     }
 }
